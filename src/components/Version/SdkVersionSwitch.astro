---
import type { Locales } from "@i18n/locales";
import { useTranslations } from "@i18n/utils";
import { findEntryBySlug } from "@utils/helpers/navigation/findEntryBySlug";
import { uniqueSdkVersions } from "@utils/helpers/navigation/getUniqueVersions";

interface Props {
  lang: string;
  currentPage: string;
}

const { lang, currentPage } = Astro.props;
const t = useTranslations(lang as keyof Locales);

// Get current page data and redirects from frontmatter
const pageData = findEntryBySlug(currentPage);
const redirects = pageData?.redirects || {};
const defaultVersion =
  (uniqueSdkVersions && uniqueSdkVersions.find((v) => v.default)?.value) || "";
---

<div
  id="combobox-holder"
  class="flex flex-col w-full min-h-90px justify-start gap-y-4 bg-slate-100 p-6 rounded-lg mb-14"
  data-redirects={JSON.stringify(redirects)}
  data-default-version={defaultVersion}
>
  <label for="combobox">{t("sdkversionswitch.label")}</label>
  <div class="relative w-full">
    <select
      id="combobox"
      name="combobox"
      class="rounded-md w-full bg-white px-3 border border-gray-80 text-sm min-h-8 appearance-none text-transparent shadow-sm"
    >
      {
        uniqueSdkVersions &&
          uniqueSdkVersions.map((sdkVersion) => (
            <option value={sdkVersion.value}>{sdkVersion.label}</option>
          ))
      }
    </select>
    <svg
      xmlns="http://www.w3.org/2000/svg"
      class="absolute right-2 top-1/2 transform -translate-y-1/2 pointer-events-none"
      width="16"
      height="16"
      fill="none"
      viewBox="0 0 16 16"
      aria-hidden="true"
    >
      <path stroke="currentColor" d="M3.5 6L8 10l4.5-4"></path>
    </svg>
  </div>
</div>

<script>
  import { $versions, changeVersionValue } from "@store/sdkVersionsStore";

  document.addEventListener("DOMContentLoaded", () => {
    const versionSelect = document.getElementById(
      "combobox",
    ) as HTMLSelectElement | null;
    const comboboxHolder = document.getElementById("combobox-holder");
    const defaultVersion =
      comboboxHolder?.getAttribute("data-default-version") || "";
    const redirects = comboboxHolder?.getAttribute("data-redirects");
    const redirectsMap = redirects ? JSON.parse(redirects) : {};

    // Utility functions
    const isVersionedPath = (path: string) => /\/sdk\/.+\/v\d/.test(path);
    const currentPath = window.location.pathname;
    const urlParams = new URLSearchParams(window.location.search);
    const urlVersionParam = urlParams.get("version");
    const pathRegex = /^\/[a-z]{2}\/sdk\/?$/;

    // 1. Initialize version select input from store and URL
    $versions.subscribe((store) => {
      const currentVersion = store.currentVersion.value;
      if (versionSelect) {
        versionSelect.value =
          urlVersionParam || currentVersion || defaultVersion;
        versionSelect.classList.remove("text-transparent");
      }
    });

    // 2. Handle URL and version synchronization
    const syncVersion = (targetVersion: string) => {
      // If redirect for version exists, navigate to it
      if (redirectsMap[targetVersion]) {
        window.location.href = redirectsMap[targetVersion];
      } else if (!pathRegex.test(currentPath)) {
        // Otherwise, modify path to include the version in URL if needed
        const updatedUrl = isVersionedPath(currentPath)
          ? currentPath.replace(/\/v\d/, `/${targetVersion}`)
          : `${currentPath}/v${targetVersion}`;
        window.location.href = updatedUrl;
      }
    };

    // 3. Handle page load cases
    if (
      !urlVersionParam &&
      isVersionedPath(currentPath) &&
      !pathRegex.test(currentPath)
    ) {
      // Case 1: Page is versioned, no ?version param
      const pathVersionMatch = currentPath.match(/\/v(\d+)/);
      const pathVersion = pathVersionMatch
        ? pathVersionMatch[1]
        : defaultVersion;
      changeVersionValue({
        label: `v${pathVersion}`,
        value: `v${pathVersion}`,
      });
    } else if (
      !isVersionedPath(currentPath) &&
      !urlVersionParam &&
      !pathRegex.test(currentPath)
    ) {
      // Case 2: Non-versioned page, no ?version param
      changeVersionValue({ label: defaultVersion, value: defaultVersion });
    } else if (urlVersionParam) {
      // Case 3: ?version param present
      const isParamVersion = urlVersionParam.match(/^v\d+$/);
      if (isParamVersion && redirectsMap[urlVersionParam]) {
        syncVersion(urlVersionParam);
      }
    }

    // 4. Change event for version select dropdown
    versionSelect?.addEventListener("change", (event) => {
      const selectedVersion = (event.target as HTMLSelectElement).value;
      changeVersionValue({ label: selectedVersion, value: selectedVersion });
      syncVersion(selectedVersion);
    });
  });
</script>
