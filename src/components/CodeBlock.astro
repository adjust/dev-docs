---
import { Code as ExpressiveCode } from "astro-expressive-code/components";
import { extractCodeFromHTML } from "@components/utils/extractCode";
import type { MarkerDefinition } from "astro-expressive-code";

interface Props {
  title?: string | undefined;
  highlight?: string;
  collapse?: string | string[] | undefined;
  ins?: string;
  del?: string;
  useDiffSyntax?: boolean;
}

const {
  title,
  highlight,
  ins,
  del,
  collapse,
  useDiffSyntax = false,
} = Astro.props as Props;

let content = "";

if (Astro.slots.has("default")) {
  // Get the raw content of the slot without transformations
  content = await Astro.slots.render("default");
}

const parseHighlight = (
  highlight: string
): MarkerDefinition | MarkerDefinition[] => {
  return highlight.split(",").map((item) => {
    item = item.trim();
    if (item.startsWith("{") && item.endsWith("}")) {
      const [key, value] = item
        .slice(1, -1)
        .split(":")
        .map((part) => part.trim());
      return { [key]: value.replace(/"/g, "") } as MarkerDefinition; // Remove quotes from the value
    }
    if (item.startsWith("/") && item.endsWith("/")) {
      return new RegExp(item.slice(1, -1), "g") as MarkerDefinition; // Return as RegExp
    }
    return item.replace(/'/g, ""); // Remove single quotes from the item
  }) as MarkerDefinition[];
};

const parseCollapse = (collapse: string | string[] | undefined): string[] => {
  if (typeof collapse === "string") {
    return collapse.split(",").map((item) => item.trim());
  }
  if (Array.isArray(collapse)) {
    return collapse;
  }
  return [];
};

const { code, lang } = extractCodeFromHTML(content);
const parsedHighlight = highlight ? parseHighlight(highlight) : undefined;
const parsedIns = ins ? parseHighlight(ins) : undefined;
const parsedDel = del ? parseHighlight(del) : undefined;
const parsedCollapse = collapse ? parseCollapse(collapse) : undefined;
---

<ExpressiveCode
  title={title}
  lang={lang}
  collapse={parsedCollapse}
  mark={parsedHighlight}
  ins={parsedIns}
  del={parsedDel}
  code={code}
  useDiffSyntax={useDiffSyntax}
/>
