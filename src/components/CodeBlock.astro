---
import { Code as ExpressiveCode } from "astro-expressive-code/components";
import { extractCodeFromHTML } from "@components/utils/extractCode";
import type { MarkerDefinition } from "astro-expressive-code";

interface Props {
  title?: string | undefined;
  highlight?: string;
  collapse?: string | string[] | undefined;
  ins?: string;
  del?: string;
  useDiffSyntax?: boolean;
  showLineNumbers?: boolean;
  startLineNumber: Number;
}

const {
  title,
  highlight,
  ins,
  del,
  collapse,
  useDiffSyntax = false,
  showLineNumbers = false,
  startLineNumber = undefined,
} = Astro.props as Props;

const parseHighlight = (highlight: string): MarkerDefinition[] => {
  return highlight.split(",").map((item) => {
    const trimmedItem = item.trim();
    if (/^\{.*\}$/.test(trimmedItem)) {
      const innerContent = trimmedItem.slice(1, -1).trim();
      if (innerContent.includes(":")) {
        const [key, value] = innerContent.split(":").map((part) => part.trim());
        return { [key]: value.replace(/['"]/g, "") } as MarkerDefinition;
      }
    } else if (/^\/.*\/$/.test(trimmedItem)) {
      return new RegExp(trimmedItem.slice(1, -1), "g") as MarkerDefinition;
    }
    return trimmedItem.replace(/['"]/g, "") as MarkerDefinition;
  }) as MarkerDefinition[];
};

const parseCollapse = (collapse?: string | string[]): string[] =>
  typeof collapse === "string"
    ? collapse.split(",").map((item) => item.trim())
    : collapse || [];

const { code, lang } = await extractCodeFromHTML(
  await Astro.slots.render("default"),
);

const codeAttributes = {
  title,
  lang,
  code,
  collapse: collapse ? parseCollapse(collapse) : [],
  mark: highlight ? parseHighlight(highlight) : [],
  ins: ins ? parseHighlight(ins) : [],
  del: del ? parseHighlight(del) : [],
  useDiffSyntax,
  showLineNumbers,
  ...(startLineNumber && { startLineNumber }),
};
---

<ExpressiveCode {...codeAttributes} />
