---
import { Code as ExpressiveCode } from "astro-expressive-code/components";
import { extractCodeFromHTML } from "@components/utils/extractCode";
import type { MarkerDefinition } from "astro-expressive-code";

interface Props {
  title?: string | undefined;
  highlight?: string;
  collapse?: string | string[] | undefined;
  ins?: string;
  del?: string;
  useDiffSyntax?: boolean;
}

const {
  title,
  highlight,
  ins,
  del,
  collapse,
  useDiffSyntax = false,
} = Astro.props as Props;

let content = "";

if (Astro.slots.has("default")) {
  // Get the raw content of the slot without transformations
  content = await Astro.slots.render("default");
}

const parseHighlight = (
  highlight: string,
): MarkerDefinition | MarkerDefinition[] => {
  return highlight.split(",").map((item) => {
    const trimmedItem = item.trim();

    if (trimmedItem.startsWith("{") && trimmedItem.endsWith("}")) {
      const innerContent = trimmedItem.slice(1, -1).trim();

      // Check if the inner content contains a colon
      if (innerContent.includes(":")) {
        const [key, value] = innerContent.split(":").map((part) => part.trim());
        return { [key]: value.replace(/"/g, "") } as MarkerDefinition;
      }

      // If no colon, treat it as a regular string token
      return trimmedItem;
    }

    if (trimmedItem.startsWith("/") && trimmedItem.endsWith("/")) {
      return new RegExp(trimmedItem.slice(1, -1), "g") as MarkerDefinition;
    }

    return trimmedItem.replace(/'/g, "");
  }) as MarkerDefinition[];
};

const parseCollapse = (collapse?: string | string[]): string[] => {
  if (typeof collapse === "string") {
    return collapse.split(",").map((item) => item.trim());
  }

  return Array.isArray(collapse) ? collapse : [];
};

const { code, lang } = await extractCodeFromHTML(content);
const parsedHighlight = highlight ? parseHighlight(highlight) : undefined;
const parsedIns = ins ? parseHighlight(ins) : undefined;
const parsedDel = del ? parseHighlight(del) : undefined;
const parsedCollapse = collapse ? parseCollapse(collapse) : undefined;
---

<ExpressiveCode
  title={title}
  lang={lang}
  collapse={parsedCollapse}
  mark={parsedHighlight}
  ins={parsedIns}
  del={parsedDel}
  code={code}
  useDiffSyntax={useDiffSyntax}
/>
