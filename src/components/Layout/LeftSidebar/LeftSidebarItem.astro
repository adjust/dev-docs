---
import classNames from "classnames";
import ChevronToggle from "./ChevronToggle.astro";
import type { SidebarItem } from "@utils/helpers/navigation/types";

interface Props {
  currentSlug: string;
  sidebarData: SidebarItem;
}

const { currentSlug, sidebarData } = Astro.props;
const { children, id, slug, version, label, categoryTitle, title, level } =
  sidebarData;
const hasChildren = children && children.length > 0 && id.split("/").length > 1;
const initialOpen = currentSlug.startsWith(sidebarData.slug);
const itemVersion = version;
const itemCategory = slug?.includes("/sdk") ? "sdk" : "api";
const itemName = label ? label : categoryTitle ? categoryTitle : title;
---

<ul
  id={`sidebar-item-${slug}`}
  class={classNames(
    `${itemVersion ? `item-version-${itemCategory}-${itemVersion}` : "item-version-0"}`,
    "list-none flex-col items-start gap-y-[8px] flex",
    {
      hidden: !!itemVersion,
      "pl-0": level === 0,
      "ml-3": level > 0,
    },
  )}
>
  <li
    class={classNames("relative hover:text-link-active min-h-[31px] text-sm", {
      "text-link-active": currentSlug === slug,
      "pl-2": level > 0,
      active: currentSlug === slug,
    })}
  >
    <div class="flex flex-row items-center cursor-pointer gap-x-[5px]">
      {hasChildren && <ChevronToggle slug={slug} initialOpen={initialOpen} />}
      <a
        id={level > 0 ? `link-${slug}` : ""}
        href={`/${slug}`}
        class={classNames(
          "inline-block w-full text-sm hover:no-underline text-inherit",
          {
            "text-link-active": currentSlug?.slice(1) === slug,
            "font-medium": initialOpen || level === 0,
            "font-normal": level > 0 && !initialOpen,
            "ml-[21px]": level > 0 && !hasChildren,
          },
        )}
      >
        {itemName}
      </a>
    </div>
  </li>
  {
    children && (
      <li>
        <ul
          id={`children-${slug}`}
          class={classNames({ hidden: !initialOpen })}
        >
          {children.map((child) => (
            <Astro.self currentSlug={currentSlug} sidebarData={child} />
          ))}
        </ul>
      </li>
    )
  }
</ul>

<script>
  import { $versions as $sdkVersions } from "@store/sdkVersionsStore";
  import { $versions as $apiVersions } from "@store/apiVersionsStore";
  import { toggleCollapse } from "./utils/toggleCollapse";

  document.addEventListener("DOMContentLoaded", () => {
    // versioning logic
    const showItems = (items: NodeListOf<Element>) => {
      items.forEach((item) => {
        item.className = item.className.replace("hidden", "");
      });
    };

    const currentSdkVersion = $sdkVersions.get()?.currentVersion;
    const currentApiVersion = $apiVersions.get()?.currentVersion;
    // need to unhide SDK/API items that match the current version, also need to unhide unversioned items
    const sidebarItems = document.querySelectorAll(
      `.item-version-sdk-${currentSdkVersion.value}, .item-version-api-${currentApiVersion.value}`,
    );

    showItems(sidebarItems);

    const items = document.querySelectorAll(".toggle-collapse");

    items.forEach((item) => {
      item.addEventListener("click", () => {
        const slug = item!
          .parentElement!.parentElement!.querySelector("a")!
          .getAttribute("href")!
          .slice(1);

        toggleCollapse(slug);
      });
    });
  });
</script>
