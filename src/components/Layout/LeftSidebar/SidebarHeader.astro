---
import type { CollectionEntry } from "astro:content";
import { uniqBy } from "lodash-es";

import AudienceDropdown from "@components/AudienceDropdown.astro";
import AdjustLogo from "@components/Icons/astro/AdjustLogo.astro";
import SdkVersionSwitch from "@components/Version/SdkVersionSwitch";
import ApiVersionSwitch from "@components/Version/ApiVersionSwitch";
import { useTranslations } from "@i18n/utils";
import { type Locales } from "@i18n/locales";
import type { NavigationData } from "@utils/helpers/navigation/types";
import classNames from "classnames";

interface Props {
  homeUrl: string;
  lang: string;
  redirects: CollectionEntry<"docs">["data"]["redirects"];
  versions: NavigationData["versions"];
}

const { homeUrl, lang, redirects, versions } = Astro.props;
const pathName = Astro.url.pathname;
const isSdkSwitch =
  pathName.includes("sdk") &&
  versions.sdk?.length &&
  (redirects || pathName.trim().split("/").length === 3);
const isApiSwitch =
  pathName.includes("api") && versions.api?.length && redirects;
const t = useTranslations(lang as keyof Locales);
---

<div
  class={classNames(
    "flex flex-col items-center pt-7 pl-[27px] sidebar-open:justify-center sidebar-open:mb-5 sidebar-open:pt-[6px] sidebar-open:pl-0",
    {
      "mb-[74px]": !isApiSwitch && !isSdkSwitch,
    },
  )}
>
  <div
    class="flex flex-row items-center xs:justify-center md:justify-start w-full"
  >
    <a href={homeUrl} title={t("header.adjust-logo-link-label")}>
      <AdjustLogo />
    </a>
    <AudienceDropdown lang={lang} />
  </div>
  <div class="w-full md:pr-8 flex justify-center">
    {
      isSdkSwitch ? (
        <SdkVersionSwitch
          client:only="react"
          lang={lang}
          redirects={redirects}
          sdkVersions={uniqBy(versions.sdk, "value")}
        />
      ) : undefined
    }
    {
      isApiSwitch ? (
        <ApiVersionSwitch
          client:only="react"
          lang={lang}
          redirects={redirects}
          apiVersions={uniqBy(versions.api, "value")}
        />
      ) : undefined
    }
  </div>
</div>
