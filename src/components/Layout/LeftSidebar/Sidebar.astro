---
import type { CollectionEntry } from "astro:content";
import SidebarHeader from "@components/Layout/LeftSidebar/SidebarHeader.astro";
import SidebarSearch from "@components/Layout/LeftSidebar/SidebarSearch.astro";
import LanguageSwitch from "@components/LanguageSwitch.astro";
import { LOCALE_NAMES } from "@i18n/locales";
import type { Languages, LanguageTrees } from "@utils/helpers/navigation/types";
import NavigationTree from "./Navigation.astro";

interface Props {
  homeUrl: string;
  lang: string;
  redirects: CollectionEntry<"docs">["data"]["redirects"];
  currentSlug: string;
  languageTree: LanguageTrees;
  versions: CollectionEntry<"docs">["data"]["versions"];
}

const { homeUrl, lang, redirects, currentSlug, languageTree, versions } =
  Astro.props;
const sidebar = languageTree[lang as Languages];
---

<aside
  id="sidebar-navigation"
  class="h-screen xs:hidden xs:absolute xs:z-30 xs:w-full lg:max-w-[294px] lg:flex lg:sticky top-0 flex flex-col border-r-[1.5px] bg-white border-[#E0EAFF] sidebar-open:flex"
  title="Site Navigation"
>
  <SidebarHeader
    homeUrl={homeUrl}
    lang={lang}
    redirects={redirects}
    versions={versions}
  />
  <SidebarSearch />
  <NavigationTree sidebar={sidebar} currentSlug={currentSlug} />
  <div class="h-[63px] border-t-[1px] border-[#CDD0E0]">
    <LanguageSwitch
      lang={lang}
      locales={LOCALE_NAMES}
      currentUrl={`/${currentSlug}`}
    />
  </div>
</aside>

<script>
  import { $versions as $sdkVersions } from "@store/sdkVersionsStore";
  import { toggleCollapse } from "./utils/toggleCollapse";

  document.addEventListener("DOMContentLoaded", () => {
    // Helper function to hide all versioned items initially
    const hideAllVersionedItems = () => {
      const versionedItems = document.querySelectorAll(
        "[class*='item-version-sdk']",
      );
      versionedItems.forEach((item) => {
        if (!item.classList.contains("hidden")) item.classList.add("hidden");
      });
    };

    // Helper function to show items for the current versions
    const showCurrentVersionItems = (sdkVersion: string) => {
      hideAllVersionedItems();
      // Select and show items for the current SDK versions
      const versionedItems = document.querySelectorAll(
        `.item-version-sdk-${sdkVersion}`,
      );
      versionedItems.forEach((item) => {
        item.classList.remove("hidden");
      });
    };

    // Initial setup: Get current versions from stores and display relevant items
    const setupSidebar = () => {
      const currentSdkVersion =
        $sdkVersions.get()?.currentVersion?.value || "v5";
      showCurrentVersionItems(currentSdkVersion);
    };

    // Run the initial setup on page load
    setupSidebar();

    // Subscribe to version changes in the Nanostore
    $sdkVersions.subscribe((store) => {
      const sdkVersion = store.currentVersion?.value;
      if (sdkVersion) {
        showCurrentVersionItems(sdkVersion);
      }
    });

    // Expandable/collapsible item logic
    const items = document.querySelectorAll(".toggle-collapse");
    items.forEach((item) => {
      item.addEventListener("click", () => {
        const slug = item!
          .parentElement!.parentElement!.querySelector("a")!
          .getAttribute("href")!
          .slice(1);

        toggleCollapse(slug);
      });
    });

    // Scroll the active item into view
    const activeItem = document.querySelector(".text-link-active");
    const sidebar = document.getElementById("sidebar-navigation");
    if (activeItem && sidebar) {
      const { top: itemTop, height: itemHeight } =
        activeItem.getBoundingClientRect();
      const { top: sidebarTop, height: sidebarHeight } =
        sidebar.getBoundingClientRect();
      const offset = itemTop - sidebarTop - (sidebarHeight - itemHeight) / 2;
      sidebar.scrollBy({ top: offset });
    }
  });
</script>
