---
import type { MarkdownHeading } from "astro";
import TableOfContents from "@components/TableOfContents.astro";
import CategoryCard from "@components/Cards/CategoryCard.astro";
import { getLanguageFromURL } from "@i18n/utils";
import { type Locales } from "@i18n/locales";
import { useTranslations } from "@i18n/utils";
import type { SidebarItem } from "@utils/types";

const currentLang = getLanguageFromURL(Astro.url.pathname);

const t = useTranslations(currentLang as keyof Locales);

type Props = {
  title: string;
  headings: MarkdownHeading[];
  currentSlug: string;
  type?: string;
  pageData: SidebarItem | undefined;
};

const { title, headings, pageData, type } = Astro.props;
let sortedLinks: SidebarItem[] = [];
if (type === "category") {
  if (pageData && pageData.children) {
    sortedLinks = pageData.children.sort((a, b) => {
      if (!a.position && !b.position) {
        return 0;
      }
      a.position = Number(a.position) || 0;
      b.position = Number(b.position) || 0;
      return a?.position > b?.position ? 1 : -1;
    });
  }
}
---

<article
  id="article"
  class=`${headings && headings.length > 0 ? "lg:w-toc-open-article" : "w-full"} sidebar-open:hidden text-black xs:px-8 lg:pr-4 lg:pl-12 pb-16 xxxl:w-full`
>
  {
    headings && headings.length > 0 && type !== "category" && (
      <aside title={t("toc.header")}>
        <TableOfContents title={title} headings={headings} lang={currentLang} />
      </aside>
    )
  }
  <section class="main-section">
    <h1 class="text-heading-1 font-bold leading-[1] mb-4" id="overview">
      {title}
    </h1>
    <div class="article-content" id="article-content">
      <slot />
      <!-- Category cards for the entry with "category" type and childs -->
      {
        sortedLinks && sortedLinks.length ? (
          <div class="w-full flex flex-wrap gap-x-2 gap-y-4">
            {sortedLinks.map((child) => (
              <CategoryCard child={child} />
            ))}
          </div>
        ) : null
      }
    </div>
  </section>
</article>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const headerLinks = document.querySelectorAll(".copy-link");

    headerLinks.forEach((link) => {
      link.addEventListener("click", (event) => {
        event.preventDefault();
        const url = link.getAttribute("href");
        const fullUrl = `${window.location.href.split("#")[0]}${url}`;

        navigator.clipboard
          .writeText(fullUrl)
          .then(() => {
            location.href = `${url}`;
            console.log(`Copied to clipboard: ${fullUrl}`);
          })
          .catch((err) => {
            console.error("Failed to copy:", err);
          });
      });
    });
  });
</script>
