---
import { HELP_CENTER_LINK } from "src/consts";
import { useTranslations } from "@i18n/utils";
import { type Locales } from "@i18n/locales";

interface Props {
  lang: string;
}

const { lang } = Astro.props;

const t = useTranslations(lang as keyof Locales);

const audiences = [
  {
    titleId: t("header.audience-picker-marketer"),
    slug: "marketer",
    link: `${HELP_CENTER_LINK}${lang}/marketer`,
  },
  {
    titleId: t("header.audience-picker-partner"),
    slug: "partner",
    link: `${HELP_CENTER_LINK}${lang}/partner`,
  },
];
---

<div
  aria-label="audience picker wrapper"
  id="audience-picker-wrapper"
  class="relative pl-2 py-[14px]"
>
  <span
    aria-label={"audience picker current audience is for Developers"}
    class="cursor-pointer mb-3 text-sm font-medium border-b-2 border-[#A96AF9]"
  >
    {t("header.audience-picker-developer")}
  </span>
  <div
    aria-label="audience picker menu"
    class="absolute flex-col top-[45px] gap-y-[2px] cursor-pointer w-max hidden"
    id="audience-picker-menu"
  >
    {
      audiences.map((audience) => (
        <a
          aria-label={`audience picker item ${audience.slug}`}
          href={audience.link}
          style={`background-color: ${
            audience.slug === "developer"
              ? "#CE9DF4"
              : audience.slug === "partner"
                ? "#00C2A4"
                : audience.slug === "marketer"
                  ? "#85ACFF"
                  : "#C3CEE5"
          }; color: #000000;`}
          class={`
          cursor-pointer min-w-[85px] w-full pr-4 pl-4 text-sm h-6 flex items-center
          hover:!no-underline active:!no-underline focus:!no-underline
          ${
            audience.slug === "marketer"
              ? "hover:!bg-[#769ff6] active:!bg-[#e0eaff]"
              : audience.slug === "partner"
                ? "hover:!bg-[#01b89c] active:!bg-[#d9ffef]"
                : ""
          }
        `}
        >
          {audience.titleId}
        </a>
      ))
    }
  </div>
</div>

<script>
  class AudienceController {
    private container: HTMLElement;
    private menu: HTMLElement;

    constructor(container: string, menu: string) {
      this.container = document.getElementById(container)!;
      this.menu = document.getElementById(menu)!;
    }

    private toggleMenu = (event: MouseEvent): void => {
      event.stopPropagation();
      this.menu.classList.toggle("hidden");
    };

    private closeMenu = (event: MouseEvent): void => {
      if (!this.container.contains(event.target as Node)) {
        this.menu.classList.add("hidden");
      }
    };

    public initialize(): void {
      this.container.addEventListener("click", this.toggleMenu);
      document.addEventListener("click", this.closeMenu);
    }
  }

  document.addEventListener("DOMContentLoaded", () => {
    const controller = new AudienceController(
      "audience-picker-wrapper",
      "audience-picker-menu",
    );

    controller.initialize();
  });
</script>
