---
import ChevronLeft from "@components/Icons/RightSidebar/ChevronLeft.astro";
import ChevronRight from "@components/Icons/RightSidebar/ChevronRight.astro";
import { useTranslations } from "@i18n/utils";
import type { Locales } from "@i18n/locales";
import type { MarkdownHeading } from "astro";

interface Props {
  title: string;
  lang: string;
  headings?: MarkdownHeading[];
}

const { title, lang, headings } = Astro.props;
const t = useTranslations(lang as keyof Locales);
---

<nav
  id="toc"
  class={"hidden transform transition duration-100 translate-x-0 mt-32 fixed top-0 bottom-0 md:right-0 xxl:left-0 border-t border-l border-bluish-grey rounded-tl-lg xxl:ml-open-toc z-25 px-4 bg-white max-h-screen w-[19rem] opacity-1 items-start z-10 lg:flex xxxl:hidden"}
>
  <div class="absolute top-0 bottom-0 flex items-start">
    <button
      id="toc-toggle-button"
      class="rounded-md overflow-hidden mt-8 bg-white relative w-6 h-6 [&_svg]:hover:bg-[#0b58fe] [&_svg]:hover:text-white"
      aria-label={t("toc.toggle-label")}
    >
      <ChevronRight id="chevron-right" class="hidden" />
      <ChevronLeft id="chevron-left" class="hidden" />
    </button>
  </div>
  <div id="toc-nav" class="pl-4 pr-4 h-full overflow-y-auto flex flex-col">
    <h2 id="toc-header" class="text-lg font-medium mb-4 mt-8">{title}</h2>
    <ul id="toc-list" class="space-y-2">
      {
        headings &&
          headings.length > 0 &&
          headings
            .filter(({ depth }) => depth > 1 && depth < 5)
            .map(
              (heading) =>
                heading.slug && (
                  <li
                    class={`toc-item depth-${heading.depth} ml-${heading.depth > 2 ? 6 : 0}`}
                  >
                    <a
                      class="toc-link text-gray-700 hover:text-blue-600 hover:no-underline"
                      href={`#${heading.slug}`}
                      data-slug={heading.slug}
                    >
                      {heading.text}
                    </a>
                  </li>
                ),
            )
      }
    </ul>
  </div>
</nav>

<nav id="toc-mobile" class="xs:block lg:hidden border p-2 my-4">
  <h2 id="on-this-page-heading" class="text-lg font-medium mb-4">{title}</h2>
  <ul id="toc-mobile-list" class="space-y-2">
    {
      headings &&
        headings.length > 0 &&
        headings
          .filter(({ depth }) => depth > 1 && depth < 5)
          .map((heading) => (
            <li
              class={`toc-item depth-${heading.depth} ml-${heading.depth > 2 ? 6 : 0}`}
            >
              <a href={`#${heading.slug}`}>{heading.text}</a>
            </li>
          ))
    }
  </ul>
</nav>

<script>
  import { handleScrollSpy } from "@utils/helpers/toc/handleScrollSpy";
  import { $tocOpen, setTocOpen } from "@store/tocOpenStore";

  document.addEventListener("DOMContentLoaded", () => {
    const toc = document.getElementById("toc");
    if (!toc) return;

    const tocButton = document.getElementById("toc-toggle-button");
    const tocList = document.getElementById("toc-list");
    const tocHeader = document.getElementById("toc-header");
    const leftChevron = document.getElementById("chevron-left");
    const rightChevron = document.getElementById("chevron-right");
    const article = document.getElementById("article");

    const storeValue = $tocOpen.get();
    let didUpdateStore = storeValue !== undefined;
    let isTocOpen = storeValue === "true" || window.innerWidth >= 1440;

    const openTocClasses = [
      "xxl:ml-open-toc",
      "z-25",
      "px-4",
      "bg-white",
      "max-h-screen",
      "w-[19rem]",
      "opacity-1",
      "items-start",
      "z-10",
    ];
    const closedTocClasses = ["w-8", "ml-closed-toc"];

    const toggleMenu = (open: boolean, updateStore: boolean) => {
      isTocOpen = open;
      if (updateStore) {
        setTocOpen(open);
        didUpdateStore = true;
      }
      tocList!.classList.toggle("hidden", !open);
      tocHeader!.classList.toggle("hidden", !open);
      leftChevron!.classList.toggle("hidden", open);
      rightChevron!.classList.toggle("hidden", !open);
      toc.classList[open ? "add" : "remove"](...openTocClasses);
      toc.classList[open ? "remove" : "add"](...closedTocClasses);
      tocButton!.classList.toggle("-ml-8", open);
      tocButton!.classList.toggle("-ml-4", !open);
      article!.classList.toggle("lg:w-toc-open-article", open);
      article!.classList.toggle("lg:w-toc-closed-article", !open);
    };

    toggleMenu(storeValue !== "false" && isTocOpen, false);

    tocButton!.addEventListener("click", () => {
      toggleMenu(!isTocOpen, true);
    });

    const debounce = (func: Function, wait: number, immediate: boolean) => {
      let timeout: any;
      return (...args: any) => {
        const later = () => {
          timeout = null;
          if (!immediate) func(...args);
        };
        const callNow = immediate && !timeout;
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
        if (callNow) func(...args);
      };
    };

    const handleResize = debounce(
      () => {
        if (!didUpdateStore) {
          const smallScreen = window.innerWidth < 1440;
          const verySmallScreen = window.innerWidth < 768;
          const bigScreen = window.innerWidth > 1600;

          if (smallScreen && !verySmallScreen) {
            setTimeout(() => toggleMenu(false, false), 100);
          } else if (!smallScreen && !verySmallScreen && !bigScreen) {
            setTimeout(() => toggleMenu(true, false), 100);
          }
        }
      },
      100,
      true,
    );

    window.addEventListener("resize", handleResize);

    const handleScroll = debounce(handleScrollSpy, 100, true);

    requestAnimationFrame(handleScroll);
  });
</script>
