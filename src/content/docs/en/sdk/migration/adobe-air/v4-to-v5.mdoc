---
title: Adobe AIR SDK v5 migration guide
description: Follow this guide to upgrade from SDK v4 to SDK v5
sidebar-label: SDK v5 migration guide
sidebar-position: 1
---


The [Adjust Adobe AIR SDK](https://github.com/adjust/adobe_air_sdk) has been updated to v5. Follow this guide to migrate from v4 to the latest version.

## Before you begin {%#before-you-begin%}

Here's what you need to do before you upgrade to Adobe Air SDK v5:

1. Adobe Air SDK v5 has native support for the [SDK signature verification](https://help.adjust.com/en/article/sdk-signature) library. If you use the SDK signature library, remove it from your app.
2. The minimum supported iOS and Android versions have been updated. If your app targets a lower version, update it first.

   - iOS: **12.0**
   - Android: **21**

### Install the SDK {%#install-the-sdk%}

To start using Adobe Air SDK v5, you need to add it as a dependency in your project. To do this, follow these steps:

```actionscript-3
package {
    import com.adjust.sdk.Adjust;
    import com.adjust.sdk.AdjustConfig;
    import com.adjust.sdk.AdjustEnvironment;
    import com.adjust.sdk.AdjustLogLevel;
    }
```

### Android permissions {%#android-permissions%}

In Adobe Air SDK v4, you needed to declare several permissions to allow your Adobe Air app for Android to access device information via the Adjust SDK for Android.

{% codeblock title="AndroidManifest.xml"%}

```xml
<uses-permission android:name="android.permission.INTERNET"/>
<uses-permission android:name="android.permission.ACCESS_WIFI_STATE"/>
<uses-permission android:name="android.permission.ACCESS_NETWORK_STATE"/>
<uses-permission android:name="com.google.android.finsky.permission.BIND_GET_INSTALL_REFERRER_SERVICE" />
```
{%/codeblock%}

In Adobe Air SDK v5, you can delete some or all, depending on your setup.

- `android.permission.INTERNET` is bundled in the Adjust SDK for Android.
- `android.permission.ACCESS_WIFI_STATE` is no longer required.
- `android.permission.ACCESS_NETWORK_STATE` is optional. This allows the SDK to access information about the network a device is connected to, and send callbacks parameters.

#### COPPA (Children's Online Privacy Protection Act) compliance

- `com.google.android.gms.permission.AD_ID` is bundled in the Adjust SDK for Android. You can [remove it](https://dev.adjust.com/en/sdk/android#add-permissions) with the following snippet:

```xml
<uses-permission android:name="com.google.android.gms.permission.AD_ID" tools:node="remove"/>
```

### Update the initialization method {%#init-method%}

{% minorversion changed="v5" /%}

In Adobe Air SDK v5, the initialization method has changed from `Adjust.start` to `Adjust.initSdk`.

```actionscript-3
Adjust.initSdk(adjustConfig);
```

#### Environment

In Adobe Air SDK v5, the environment setting has been renamed from `Environment` to `AdjustEnvironment`.

```actionscript-3
var environment:String = AdjustEnvironment.SANDBOX;
```

{% deflist %}
   `environment`: `String`

   : The environment in which your device is running.

   - Pass `AdjustEnvironment.SANDBOX` when testing.
   - Pass `AdjustEnvironment.PRODUCTION` when running the app in production.
{% /deflist %}

#### Log level

In Adobe Air SDK v5, the logging level setting has been renamed from `LogLevel` to `AdjustLogLevel`.

```actionscript-3
adjustConfig.setLogLevel(AdjustLogLevel.VERBOSE);
```

{% deflist %}
   `setLogLevel`: `String`

   : The level of logging you want to enable.

   - `adjustConfig.setLogLevel(LogLevel.VERBOSE)`: enable all logging
   - `adjustConfig.setLogLevel(LogLevel.DEBUG)`: disable verbose logging.
   - `adjustConfig.setLogLevel(LogLevel.INFO)`: the default: Log information, warnings, and errors.
   - `adjustConfig.setLogLevel(LogLevel.WARN)`: log only errors and warnings.
   - `adjustConfig.setLogLevel(LogLevel.ERROR)`: log only errors.
   - `adjustConfig.setLogLevel(LogLevel.ASSERT);`: disable errors.
   - `adjustConfig.setLogLevel(LogLevel.SUPPRESS);`: disable all logging.
{% /deflist %}

### Sample initialization snippet {%#sample-initialization-snippet%}

To initialize the Adobe Air SDK v5, adapt the following code sample:

```actionscript-3
package {
  import com.adjust.sdk.Adjust;
  import com.adjust.sdk.AdjustConfig;
  import com.adjust.sdk.AdjustEnvironment;
  import com.adjust.sdk.AdjustLogLevel;

  public class Example extends Sprite {
      public function Example() {
        var appToken:String = "{YourAppToken}";
        var environment:String = Environment.SANDBOX;

          var adjustConfig:AdjustConfig = new AdjustConfig(appToken, environment);
          adjustConfig.setLogLevel(LogLevel.VERBOSE);

          Adjust.start(adjustConfig);
      }
  }
}

```

## Changes and deprecations {%#changes-deprecations%}

Below is the complete list of changed, renamed, and [deprecated](#removed-apis) APIs in Adobe Air SDK v5.

Each section includes a reference to the previous and current API implementations, as well as a minimal code snippet that illustrates how to use the latest version.

{%callout type="tip"%}
> TODO: To learn how to set up an Adobe Air SDK v5 example app, follow a step-by-step tutorial to configure and implement all available features.
{%/callout%}

## Changed APIs {%#changed-apis%}

{% minorversion changed="v5" size="large" /%}

The following APIs have changed in Adobe Air SDK v5.

### Disable and enable the SDK {%#disable-enable-sdk%}

The `setEnabled` method has been renamed. Adobe Air SDK v5 introduces two separate methods, for clarity:

- Call `Adjust.disable` to disable the SDK.
- Call `Adjust.enable` to enable the SDK.

```actionscript-3
Adjust.disable(); // disable SDK
Adjust.enable(); // enable SDK
```

### Offline mode {%#offline-mode%}

The `setOfflineMode` method has been renamed. Adobe Air SDK v5 introduces two separate methods, for clarity:

- Call `Adjust.switchToOfflineMode` to set the SDK to offline mode.
- Call `Adjust.switchBackToOnlineMode` to set the SDK back to online mode.

```actionscript-3
Adjust.switchToOfflineMode(); // Set the SDK to offline mode
Adjust.switchBackToOnlineMode(); // Set the SDK back to online mode
```

### Send information in background {%#send-in-background%}

The `setSendInBackground` method has been renamed to `enableSendingInBackground`.

To enable the Adobe Air SDK v5 to send information to Adjust while your app is running in the background, call the `enableSendingInBackground` method on your `adjustConfig` instance. The default state is `false`.

```actionscript-3
adjustConfig.enableSendingInBackground();
```

### Set attribution callback {%#attribution-callback%}

In Adobe Air SDK v5, the `setAttributionCallbackDelegate` method has been renamed to `setAttributionCallback`.

The properties of the `attribution` parameter have also changed:

- The `var adid:String` is no longer part of the attribution.
- The `getAdGroup()` getter method has been renamed to `getAdgroup()`.

The following properties have been added to the `attribution` parameter:

- `var costType:String`
- `var costAmount:Number`
- `var costCurrency:String`
- `var fbInstallReferrer:String`

Below is a sample snippet that implements these changes:

```actionscript-3
adjustConfig.setAttributionCallback(function (attribution:AdjustAttribution): void {
    trace("Tracker token = " + attribution.getTrackerToken());
    trace("Tracker name = " + attribution.getTrackerName());
    trace("Campaign = " + attribution.getCampaign());
    trace("Network = " + attribution.getNetwork());
    trace("Creative = " + attribution.getCreative());
    trace("Adgroup = " + attribution.getAdgroup());
    trace("Click label = " + attribution.getClickLabel());
    trace("Cost type = " + attribution.getCostType());
    trace("Cost amount = " + isNaN(attribution.getCostAmount()) ? "NaN" : attribution.getCostAmount().toString());
    trace("Cost currency = " + attribution.getCostCurrency());
    trace("FB install referrer = " + attribution.getFbInstallReferrer());
});
```

### Event deduplication {%#event-deduplication%}

In Adobe Air SDK v5, event deduplication is decoupled from the event `transaction ID`. To prevent measuring duplicated events, use the `deduplicationId` ID field.

```actionscript-3
adjustEvent.setDeduplicationId("deduplicationId");
```

### Push tokens {%#push-tokens%}

In Adobe Air SDK v5, the `setDeviceToken` method has been renamed to `setPushToken`.

```actionscript-3
Adjust.setPushToken("push-token");
```

### Session callback parameters {%#session-callback-parameters%}

In Adobe Air SDK v5, the session callback parameters have been renamed to global callback parameters.

To add global callbacks to your sessions, call the `Adjust.addGlobalCallbackParameter` method with the following arguments:

{% deflist %}
`key`: `String`

: The key of your parameter.

`value`: `String`

: The value of your parameter.
{% /deflist %}

 > TODO: Learn how to set up global callback.

```actionscript-3
Adjust.addGlobalCallbackParameter("user_id", "855");
Adjust.removeGlobalCallbackParameter("user_id");
Adjust.removeGlobalCallbackParameters();
```

### Session partner parameters {%#session-partner-parameters%}

In Adobe Air SDK v5, the session partner parameters have been renamed to global partner parameters.

To add global partner to your sessions, call the `Adjust.addGlobalPartnerParameter` method with the following arguments:

{% deflist %}
`key`: `String`

: The key of your parameter.

`value`: `String`

: The value of your parameter.
{% /deflist %}

> TODO: Learn how to set up global partner parameters.

```actionscript-3
Adjust.addGlobalPartnerParameter("user_id", "855");
Adjust.removeGlobalPartnerParameter("user_id");
Adjust.removeGlobalPartnerParameters();
```

## Session and event callbacks {%#session-event-callbacks%}

### Session success callbacks {%#session-success%}

In Adobe Air SDK v5, the `sessionTrackingSucceededDelegate` method has been renamed to `setSessionSuccessCallback`.

The `getTimeStamp()` method has been renamed to `getTimestamp()`.

To register a successful session recording by the SDK, call the `setSessionSuccessCallback` with any of the following properties:

```actionscript-3
adjustConfig.setSessionSuccessCallback(function (sessionSuccess:AdjustSessionSuccess):void {

// All session success properties.
    trace("Session tracking succeeded");
    trace("Message = " + sessionSuccess.getMessage());
    trace("Timestamp = " + sessionSuccess.getTimestamp());
    trace("Adid = " + sessionSuccess.getAdid());
    trace("Json Response = " + sessionSuccess.getJsonResponse());
});
```

### Session failure callbacks {%#session-failure%}

In Adobe Air SDK v5, the `setSessionTrackingFailedDelegate` method has been renamed to `setSessionFailureCallback`.

The `getTimeStamp()` method has been renamed to `getTimestamp()`.

To register a failed session recording by the SDK, call the `setSessionFailureCallback` with any of the following properties:

```actionscript-3
adjustConfig.setSessionFailureCallback(function (sessionFailure:AdjustSessionFailure):void {

// All session failure properties.
    trace("Session tracking failed");
    trace("Message = " + sessionFailure.getMessage());
    trace("Timestamp = " + sessionFailure.getTimestamp());
    trace("Adid = " + sessionFailure.getAdid());
    trace("Will Retry = " + sessionFailure.getWillRetry().toString());
    trace("Json Response = " + sessionFailure.getJsonResponse());
});
```

### Event success callbacks {%#event-success%}

In Adobe Air SDK v5, the `setEventTrackingSucceededDelegate` method has been renamed to `setEventSuccessCallback`.

The `getTimeStamp()` method has been renamed to `getTimestamp()`.

To register a successful event recording by the SDK, call the `setEventSuccessCallback` with any of the following properties:

```actionscript-3
adjustConfig.setEventSuccessCallback(function (eventSuccess:AdjustEventSuccess):void {

// All event success properties.
trace("Event tracking succeeded");
trace("Message = " + eventSuccess.getMessage());
trace("Timestamp = " + eventSuccess.getTimestamp());
trace("Adid = " + eventSuccess.getAdid());
trace("Event Token = " + eventSuccess.getEventToken());
trace("Callback Id = " + eventSuccess.getCallbackId());
trace("Json Response = " + eventSuccess.getJsonResponse());
});
```

### Event failure callbacks {%#event-failure%}

In Adobe Air SDK v5, the `setEventTrackingFailedDelegate` method has been renamed to `setEventFailureCallback`.

The `getTimeStamp()` method has been renamed to `getTimestamp()`.

To register a failed event recording by the SDK, call the `setEventFailureCallback` with any of the following properties:

```actionscript-3
adjustConfig.setEventFailureCallback(function (eventFailure:AdjustEventFailure):void {

// All event failure properties.
    trace("Event tracking failed");
    trace("Message = " + eventFailure.getMessage());
    trace("Timestamp = " + eventFailure.getTimestamp());
    trace("Adid = " + eventFailure.getAdid());
    trace("Event Token = " + eventFailure.getEventToken());
    trace("Callback Id = " + eventFailure.getCallbackId());
    trace("Will Retry = " + eventFailure.getWillRetry().toString());
    trace("Json Response = " + eventFailure.getJsonResponse());
});
```

## Deep links {%#deep-links%}

### Reattribution using direct deep links {%#reattribution-using-deep-links%}

In Adobe Air SDK v5, the `appWillOpenUrl` method has been renamed to `processDeeplink`.

To open a direct deep link, create a new `AdjustDeeplink` instance with the deep link URL, and pass it to the `Adjust.processDeeplink` method.

```actionscript-3
var deeplink:String = event.arguments[0];
    trace("Deep link = " + deeplink);
    var adjustDeeplink:AdjustDeeplink = new AdjustDeeplink("url");
    Adjust.processDeeplink(adjustDeeplink);
```

> TODO: Learn how to reattribute users with direct deep links.

### Disable opening deferred deep links {%#launch-deferred-deep-links%}

In Adobe Air SDK v5, the `setShouldLaunchDeeplink` method has been renamed to `disableDeferredDeeplinkOpening`. Opening deferred deep links is enabled by default.


To disable opening deferred deep links, call the renamed method:

```actionscript-3
adjustConfig.disableDeferredDeeplinkOpening();
```

### Deferred deep link callback listener {%#deffered-deep-link-callback-listener%}

In Adobe Air SDK v5, the `setDeferredDeeplinkDelegate` method has been renamed to `setDeferredDeeplinkCallback`.


To set a deferred deep link callback, call the `setDeferredDeeplinkCallback` method on your `AdjustConfig` instance:

```actionscript-3
adjustConfig.setDeferredDeeplinkCallback(function (deeplink:String):void {
    trace("Received deferred deep link");
    trace("Deep link = " + deeplink);
});
```

> TODO: Learn how to work with deferred deep link callbacks.

## iOS only APIs {%#ios-only-apis%}

### SKAdNetwork handling (iOS only) {%#skadnetwork-handling%}

In Adobe Air SDK v5, the `deactivateSKAdNetworkHandling` method has been renamed to `disableSkanAttribution`. The default state is `true`.

To disable the SKAdNetwork communication, call the `disableSkanAttribution` method on your `adjustConfig` instance.

```actionscript-3
adjustConfig.disableSkanAttribution();
```

### App Tracking Transparency authorization wrapper (iOS only) {%#att-wrapper%}

In Adobe Air SDK v5, the `requestTrackingAuthorizationWithCompletionHandler` method has been renamed to `requestAppTrackingAuthorization` for clarity.

The renamed method is invoked like so:

```actionscript-3
Adjust.requestAppTrackingAuthorization(function (status:String):void {
    trace("Status = " + status);
});
```

## Get device information {%#device-info%}

In Adobe Air SDK v4, all device information getter methods run synchronously.

In SDK v5, the following methods have been changed to run asynchronously.

### Adjust ID

{% codeblock title="Adjust ID getter"%}
```actionscript-3
Adjust.getAdid(function (adid:String):void {
    trace("Adjust ID = " + adid);
});
```
{% /codeblock %}

### Amazon Advertising ID

{% codeblock title="Amazon ADID getter"%}
```actionscript-3
Adjust.getAmazonAdId(function (amazonAdId:String):void {
    trace("Amazon Advertising ID = " + amazonAdId);
});
```
{% /codeblock %}

### Apple's Identifier for Advertisers (IDFA)

{% codeblock title="IDFA getter"%}
```actionscript-3
Adjust.getIdfa(function (idfa:String): void {
    trace("IDFA = " + idfa);
});
```
{% /codeblock %}

### Attribution

{% codeblock title="Attribution getter"%}
```actionscript-3
Adjust.getAttribution(function (attribution:AdjustAttribution): void {
    trace("Tracker token = " + attribution.getTrackerToken());
    trace("Tracker name = " + attribution.getTrackerName());
    trace("Campaign = " + attribution.getCampaign());
    trace("Network = " + attribution.getNetwork());
    trace("Creative = " + attribution.getCreative());
    trace("Adgroup = " + attribution.getAdgroup());
    trace("Click label = " + attribution.getClickLabel());
    trace("Cost type = " + attribution.getCostType());
    trace("Cost amount = " + isNaN(attribution.getCostAmount()) ? "NaN" : attribution.getCostAmount().toString());
    trace("Cost currency = " + attribution.getCostCurrency());
    trace("FB install referrer = " + attribution.getFbInstallReferrer());
});
```
{% /codeblock %}

## Removed APIs {%#removed-apis%}

{% minorversion removed="v5" size="large" /%}

The following APIs have been removed from Adobe Air SDK v5.

- The `setDelayStart` method has been removed.
- The `setEventBufferingEnabled` method has been removed.
- The `setReadMobileEquipmentIdentity` method has been removed. (**non-Google Play Store Android apps only**)

### Disable third party sharing globally {%#disable-sharing-globally%}

The `disableThirdPartySharing` method has been removed.

To enable or disable all third-party sharing in Adobe Air SDK v5, use the `trackThirdPartySharing` method.

```actionscript-3
var adjustThirdPartySharing:AdjustThirdPartySharing = new AdjustThirdPartySharing("false");
Adjust.trackThirdPartySharing(adjustThirdPartySharing);
```

### Set an app secret {%#set-app-secret%}

The `setAppSecret` method has been removed.

The [SDK signature library](https://help.adjust.com/en/article/sdk-signature) is bundled in Adjust SDKs v5 and enabled by default. To configure the anti-spoofing solution in the Adjust Dashboard, follow [the integration guide](https://help.adjust.com/en/article/sdk-signature#get-started) for your platform.

### Huawei referrer API

This feature has been removed. If your Adobe Air app uses the Huawei referrer API, contact your Adjust representative or email [support@adjust.com](mailto:support@adjust.com) before you upgrade.
