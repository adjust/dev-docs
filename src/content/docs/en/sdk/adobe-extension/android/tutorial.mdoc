---
title: Android Adobe Extension tutorial
description: Follow this tutorial to see how to use each feature of the Adjust Extension in context.
sidebar-label: Tutorial
---

In this tutorial, you'll build an example app that implements each feature of the Adjust Android Extension for Adobe Experience SDK. You'll build on the code you set up in the [integration guide](/en/sdk/adobe-extension/android/integration) and learn how to to add each supported feature to your Adobe Experience app.

## Configure Adjust settings {% #configure-adjust-settings %}

To configure the Adjust Android Extension for Adobe Experience SDK, you need to add your configuration options in your `MainApp.java` file. Here is how the file looked at the end of the integration guide:

```java
// MainApp.java
import android.app.Application;
import android.util.Log;

import com.adjust.adobeextension.AdjustAdobeExtension;
import com.adjust.adobeextension.AdjustAdobeExtensionConfig;
import com.adobe.marketing.mobile.AdobeCallback;
import com.adobe.marketing.mobile.Extension;
import com.adobe.marketing.mobile.Analytics;
import com.adobe.marketing.mobile.Identity;
import com.adobe.marketing.mobile.LoggingMode;
import com.adobe.marketing.mobile.MobileCore;

public class MainApp extends Application {
   @Override
   public void onCreate() {
      super.onCreate();

      MobileCore.setApplication(this);
      MobileCore.setLogLevel(LoggingMode.VERBOSE);

      try {
         MobileCore.configureWithAppID("your_adobe_app_id");

         AdjustAdobeExtensionConfig config =
               new AdjustAdobeExtensionConfig(AdjustAdobeExtensionConfig.ENVIRONMENT_SANDBOX);
         AdjustAdobeExtension.setConfiguration(config);
      } catch (Exception e) {
         Log.e("example", "Exception occurred during configuration: " + e.getMessage());
      }

      try {
         List<Class<? extends Extension>> extensions = Arrays.asList(
               Analytics.EXTENSION,
               Identity.EXTENSION,
               AdjustAdobeExtension.EXTENSION);
         MobileCore.registerExtensions(extensions, new AdobeCallback<Object>() {
            @Override
            public void call(Object o) {
               Log.d("example", "Adjust Adobe Extension SDK initialized");
            }
         });
      } catch (Exception e) {
         Log.e("example", "Exception occurred while registering Extension: " + e.getMessage());
      }
   }
}
```

In this tutorial, you'll learn how to use the Adjust Extension's configuration options to configure your integration.

### D

## Set up Adjust functions {% #set-up-adjust-functions %}

To respond to changes in your app, you can add Adjust functions to your `MainActivity.java` file. Here is how the file looked at the end of the integration guide:

```java
// MainActivity.java
import android.content.Intent;
import android.net.Uri;
import android.os.Bundle;
import android.view.View;

import androidx.appcompat.app.AppCompatActivity;

import com.adjust.sdk.Adjust;
import com.adjust.sdk.AdjustDeeplink;

public class MainActivity extends AppCompatActivity {
   @Override
   protected void onCreate(Bundle savedInstanceState) {
      super.onCreate(savedInstanceState);
      setContentView(R.layout.activity_main);

      Intent intent = getIntent();
      Uri data = intent.getData();
      AdjustDeeplink adjustDeeplink = new AdjustDeeplink(data);
      Adjust.processDeeplink(adjustDeeplink, getApplicationContext());
   }
}
```

In this tutorial, you'll learn how to add functions to this file to send information to Adjust. By the end, your code will look like this:

{% partial file="_MainActivity.mdoc" /%}

### Add function buttons {% #add-function-buttons %}

Before you start adding functions to handle changes in your app, add some buttons in your app to trigger your functions for testing. Here is an example layout with a button for each function you'll build.

{% partial file="_activity_main.mdoc" /%}

Each button in this layout maps to a function in the `MainActivity.java` file. Pressing one of these buttons will trigger the function and send information to Adjust.

### Set up events {% #set-up-events %}

To send event information to Adjust, you need to create a function for each event that constructs a `contextData` HashMap and calls `MobileCore.sendAction` to send the details. See [Send event information](/en/sdk/adobe-extension/android/events) for more information about the `contextData` HashMap.

For the purposes of this tutorial, you'll create a new function called `sendEvent` that constructs an event containing:

- Revenue information.
- Callback parameters.
- Partner parameters.

Follow these steps to implement each of these functions:

1. Import the `java.util.HashMap` and `java.util.Map` classes. These will be used to build your `contextData` HashMap.

   {% codeblock
      title="MainActivity.java"
      highlight="{range: 11-12}"
      collapse="15-43" %}
   {% partial file="_MainActivity.mdoc" /%}
   {% /codeblock %}

1. Import the `com.aadobe.marketing.mobile.MobileCore` class. You'll use this to send information to Adjust.

   {% codeblock
      title="MainActivity.java"
      highlight="{range: 9}"
      collapse="15-43" %}
   {% partial file="_MainActivity.mdoc" /%}
   {% /codeblock %}

1. Within your `MainActivity` class, add a new public function called `sendEvent`. This function should accept your `View` as an argument and return `void`.

   {% codeblock
      title="MainActivity.java"
      collapse="15-24, 35-43"
      highlight="{range: 25}" %}
   {% partial file="_MainActivity.mdoc" /%}
   {% /codeblock %}

1. Inside your `sendEvent` function, create a new string variable called `action` and assign it the value `AdjustAdobeExtension.ADOBE_ADJUST_ACTION_TRACK_EVENT`. This is the action that the `MobileCore.trackAction` is instructed to use.

   {% codeblock
      title="MainActivity.java"
      collapse="15-24, 35-43"
      highlight="{range: 26}" %}
   {% partial file="_MainActivity.mdoc" /%}
   {% /codeblock %}

1. Next, create a new `Map` called `contextData`. This will hold your event details.

   {% codeblock
      title="MainActivity.java"
      collapse="15-24, 35-43"
      highlight="{range: 27}" %}
   {% partial file="_MainActivity.mdoc" /%}
   {% /codeblock %}

1. Add your event details to the `contextData` HashMap. In this example, the following details are set:

   - The event token is set to `"g3mfiw"`.
   - The event revenue is set to 1 Euro.
   - A callback parameter with the key `"user_id"` and value `"855"` is added.
   - A partner parameter with the key `"event_token` and value `"g3mfiw"` is added.

   {% codeblock
      title="MainActivity.java"
      collapse="15-24"
      highlight="{range: 28-32}" %}
   {% partial file="_MainActivity.mdoc" /%}
   {% /codeblock %}

When you interact with the `sendEvent` button in your app, this function is called and the event information gets sent to Adjust.

### Set your push token {% #set-your-push-token %}

Now that you've got the hang of events, next you'll create a function to send updated push tokens to Adjust. For the purposes of this tutorial, this function is also mapped to a button in the interface. See [Configure push tokens](/en/sdk/adobe-extension/android/push-tokens) for more information about push tokens.

1. Within your `MainActivity` class, add a new public function called `sendPushToken`. This function should accept your `View` as an argument and return `void`.

   {% codeblock
      title="MainActivity.java"
      collapse="15-36"
      highlight="{range: 37}" %}
   {% partial file="_MainActivity.mdoc" /%}
   {% /codeblock %}

1. Inside your `sendPushToken` function, create a new string variable called `action` and assign it the value `AdjustAdobeExtension.ADOBE_ADJUST_ACTION_SET_PUSH_TOKEN`. This is the action that the `MobileCore.trackAction` is instructed to use.

   {% codeblock
      title="MainActivity.java"
      collapse="15-36"
      highlight="{range: 38}" %}
   {% partial file="_MainActivity.mdoc" /%}
   {% /codeblock %}

1. Next, create a new Map called `contextData`. This will hold your push token details.

   {% codeblock
      title="MainActivity.java"
      collapse="15-36"
      highlight="{range: 39}" %}
   {% partial file="_MainActivity.mdoc" /%}
   {% /codeblock %}

1. Add your push token details to the hashmap using the `AdjustAdobeExtension.ADOBE_ADJUST_PUSH_TOKEN` key. In this example, the push token is set to `"de18dbf8-f38a-4962-8f1e-44abcf43055d"`.

   {% codeblock
      title="MainActivity.java"
      collapse="15-36"
      highlight="{range: 40}" %}
   {% partial file="_MainActivity.mdoc" /%}
   {% /codeblock %}

1. To send the push token, call the `MobileCore.trackAction` method with your `action` and `contextData` variables as arguments.

   {% codeblock
      title="MainActivity.java"
      collapse="15-36"
      highlight="{range: 42}" %}
   {% partial file="_MainActivity.mdoc" /%}
   {% /codeblock %}
