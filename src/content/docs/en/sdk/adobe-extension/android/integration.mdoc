---
title: Android Adobe Extension integration guide
description: Follow this guide to integrate the Adjust Android Extension for Adobe Experience SDK.
sidebar-position: 1
sidebar-label: Integration guide
---

This is a step-by-step guide to help you integrate and configure the Adjust Extension in your Adobe Experience app for Android. With this extension, you can seamlessly integrate Adjust with the Adobe Experience SDK to capture and send attribution data and in-app event information.

This extension enables you to send installs, sessions, custom in-app events, and other types of data to Adjust. Follow this guide to set up and configure the Adjust Extension and verify that you can send install information to Adjust.

## Set up your project {% #set-up-your-project %}

Follow these steps to set up your project to support the Adjust Extension for Adobe Experience SDK.

### Install the Adjust Extension {% #install-the-adjust-extension %}

To use the Adjust Extension for Adobe Experience SDK, you need to add it to your project as a dependency. The relevant packages are available on [Maven](https://maven.apache.org).

Add the following to your `build.gradle` file:

{% deflist %}
`com.adjust.adobeextension:adobeextension`

: The Adjust extension for Adobe Experience.

`com.adjust.sdk:adjust-android`

: The Adjust Android SDK.

`com.android.installreferrer:installreferrer`

: The Android Install Referrer API.
{% /deflist %}

```groovy
dependencies {
  implementation 'com.adjust.adobeextension:adobeextension:{% $versions.android_adobe_extension.v3 %}'
  implementation 'com.adjust.sdk:adjust-android:{% $versions.android.v5 %}'
  implementation 'com.adobe.marketing.mobile:core:3.2.0'
  implementation 'com.android.installreferrer:installreferrer:2.2'
}
```

### Add Google Play Services {% #add-google-play-services %}

Apps that target the Google Play Store must use the `gps_adid` (Google Advertising ID) to identify devices. To access the `gps_adid`, add the `play-services-ads-identifier` AAR to your project.

If you're using Maven, add the `com.google.android.gms:play-services-ads-identifier` implementation to your `build.gradle` file.

```groovy
dependencies {
   implementation 'com.google.android.gms:play-services-ads-identifier:18.0.1'
}
```

### Configure permissions {% #configure-permissions %}

The Adjust Extension for Adobe Experience SDK bundles all required permissions by default. You don't need to add any permissions for the extension to work.

If your app needs to be COPPA (Children's Online Privacy Protection Act) compliant or you don't target the Google Play Store, you MUST remove the `com.google.android.gms.permission.AD_ID` permission using a `remove` directive in your `AndroidManifest.xml` file.

```xml
<uses-permission android:name="com.google.android.gms.permission.AD_ID" tools:node="remove"/>
```

## Integration guide {% #integration-guide %}

Once you've completed the project setup steps, continue to integrate the Adjust Extension for Adobe Experience SDK. The following guide shows you how to:

1. Add the Adjust Extension to your Adobe Experience app.
1. Set your logging level to **verbose** to retrieve as much detail as possible from the extension.
1. Test the Extension in **sandbox** mode to ensure it sends data to Adjust.
1. Enable your app to open deep links.
1. Register with the Adobe Experience SDK.

### Create a global application class {% #create-a-global-application-class %}

The recommended way to register the Adjust Android Extension for Adobe Experience SDK is to use a global Android [Application class](http://developer.android.com/reference/android/app/Application.html). If you've not yet created an Application, follow these steps:

1. Create a new class that extends `Application`

1. Open your `AndroidManifest.xml` and find the `<application>` element.

1. Add the name of your new class as an `android:name` attribute. In this example, the new `Application` class is named `MainApp`.

   ```xml
   <application android:name=".MainApp">
   </application>
   ```

1. Within your `Application` class, find or add the `onCreate` method.

   {% codeblock title="MainApp.java" highlight="{range: 5-7}" %}
   ```java
   import android.app.Application;
   
   public class MainApp extends Application {
      @Override
      public void onCreate() {
         super.onCreate();
      }
   }
   ```
   {% /codeblock %}

### Configure the Adjust Extension {% #configure-the-adjust-extension %}

Once you've created the `Application` class and called `onCreate`, follow these steps to configure the Adjust Android Extension for Adobe Experience SDK:

1. Import the `com.adobe.marketing.mobile.MobileCore` class, and call `MobileCore.setApplication(this)` to register the application context.

   {% codeblock title="MainApp.java" highlight="{range: 11}" %}
   ```java
   import android.app.Application;
   import android.util.Log;
   
   import com.adobe.marketing.mobile.MobileCore;
   
   public class MainApp extends Application {
      @Override
      public void onCreate() {
         super.onCreate();
   
         MobileCore.setApplication(this);
      }
   }
   ```
   {% /codeblock %}

1. Import the `com.adobe.marketing.mobile.LoggingMode` class, and set your logging level by calling the `MobileCore.setLogLevel` method with the following argument:

   {% deflist %}
   `logLevel`: `String`

   : The level of logging you want to enable.

   - `LoggingMode.VERBOSE`: enable all logging.
   - `LoggingMode.DEBUG`: disable verbose logging.
   - `LoggingMode.WARNING`: log only errors and warnings.
   - `LoggingMode.ERROR`: log only errors.
   {% /deflist %}

   {% codeblock title="MainApp.java" highlight="{range:12-13}" %}
   ```java
   import android.app.Application;
   import android.util.Log;
   
   import com.adobe.marketing.mobile.LoggingMode;
   import com.adobe.marketing.mobile.MobileCore;
   
   public class MainApp extends Application {
      @Override
      public void onCreate() {
         super.onCreate();
   
         MobileCore.setApplication(this);
         MobileCore.setLogLevel(LoggingMode.VERBOSE);
      }
   }
   ```
   {% /codeblock %}

1. Create a new `try...catch` block to configure the Adjust Extension:

   {% codeblock title="MainApp.java" highlight="{range: 15-18}" %}
   ```java
   import android.app.Application;
   import android.util.Log;
   
   import com.adobe.marketing.mobile.LoggingMode;
   import com.adobe.marketing.mobile.MobileCore;
   
   public class MainApp extends Application {
      @Override
      public void onCreate() {
         super.onCreate();
   
         MobileCore.setApplication(this);
         MobileCore.setLogLevel(LoggingMode.VERBOSE);
   
         try {
         } catch (Exception e) {
            Log.e("example", "Exception occurred during configuration: " + e.getMessage());
         }
      }
   }
   ```
   {% /codeblock %}

1. Within your `try` block, call `MobileCore.configureWithAppID` and pass your Adobe app ID.

   {% codeblock title="MainApp.java" highlight="{range: 16}" %}
   ```java
   import android.app.Application;
   import android.util.Log;
   
   import com.adobe.marketing.mobile.LoggingMode;
   import com.adobe.marketing.mobile.MobileCore;
   
   public class MainApp extends Application {
      @Override
      public void onCreate() {
         super.onCreate();
   
         MobileCore.setApplication(this);
         MobileCore.setLogLevel(LoggingMode.VERBOSE);
   
         try {
            MobileCore.configureWithAppID("your_adobe_app_id");
         } catch (Exception e) {
            Log.e("example", "Exception occurred during configuration: " + e.getMessage());
         }
      }
   }
   ```
   {% /codeblock %}

1. Import the following classes:

   - `com.adjust.adobeextension.AdjustAdobeExtension`
   - `com.adjust.adobeextension.AdjustAdobeExtensionConfig`

1. Create a new instance of `AdjustAdobeExtensionConfig` with the following argument:

   {% deflist %}
   `environment`: `String`

   : The environment in which your device is running.

   - Pass `AdjustAdobeExtensionConfig.ENVIRONMENT_SANDBOX` when testing.
   - Pass `AdjustAdobeExtensionConfig.ENVIRONMENT_PRODUCTION` when running the app in production.
   {% /deflist %}

   {% codeblock title="MainApp.java" highlight="{range: 20-21}" %}
   ```java
   import android.app.Application;
   import android.util.Log;
   
   import com.adjust.adobeextension.AdjustAdobeExtension;
   import com.adjust.adobeextension.AdjustAdobeExtensionConfig;
   import com.adobe.marketing.mobile.LoggingMode;
   import com.adobe.marketing.mobile.MobileCore;
   
   public class MainApp extends Application {
      @Override
      public void onCreate() {
         super.onCreate();
   
         MobileCore.setApplication(this);
         MobileCore.setLogLevel(LoggingMode.VERBOSE);
   
         try {
            MobileCore.configureWithAppID("your_adobe_app_id");
   
            AdjustAdobeExtensionConfig config =
                     new AdjustAdobeExtensionConfig(AdjustAdobeExtensionConfig.ENVIRONMENT_SANDBOX);
         } catch (Exception e) {
            Log.e("example", "Exception occurred during configuration: " + e.getMessage());
         }
      }
   }
   ```
   {% /codeblock %}

1. Call `AdjustAdobeExtension.setConfiguration` with your `AdjustAdobeExtensionConfig` instance as an argument.

   {% codeblock title="MainApp.java" highlight="{range: 22}" %}
   ```java
   import android.app.Application;
   import android.util.Log;
   
   import com.adjust.adobeextension.AdjustAdobeExtension;
   import com.adjust.adobeextension.AdjustAdobeExtensionConfig;
   import com.adobe.marketing.mobile.LoggingMode;
   import com.adobe.marketing.mobile.MobileCore;
   
   public class MainApp extends Application {
      @Override
      public void onCreate() {
         super.onCreate();
   
         MobileCore.setApplication(this);
         MobileCore.setLogLevel(LoggingMode.VERBOSE);
   
         try {
            MobileCore.configureWithAppID("your_adobe_app_id");
   
            AdjustAdobeExtensionConfig config =
                  new AdjustAdobeExtensionConfig(AdjustAdobeExtensionConfig.ENVIRONMENT_SANDBOX);
            AdjustAdobeExtension.setConfiguration(config);
         } catch (Exception e) {
            Log.e("example", "Exception occurred during configuration: " + e.getMessage());
         }
      }
   }
   ```
   {% /codeblock %}

### Register the Adjust Extension {% #register-the-adjust-extension %}

Once you've configured the Adjust Extension, you need to register it with the Adobe Experience SDK. To do this:

1. Create a new `try...catch` block below your configuration block.

   {% codeblock title="MainApp.java" highlight="{range: 27-30}" %}
   ```java
   import android.app.Application;
   import android.util.Log;
   
   import com.adjust.adobeextension.AdjustAdobeExtension;
   import com.adjust.adobeextension.AdjustAdobeExtensionConfig;
   import com.adobe.marketing.mobile.LoggingMode;
   import com.adobe.marketing.mobile.MobileCore;
   
   public class MainApp extends Application {
      @Override
      public void onCreate() {
         super.onCreate();
   
         MobileCore.setApplication(this);
         MobileCore.setLogLevel(LoggingMode.VERBOSE);
   
         try {
            MobileCore.configureWithAppID("your_adobe_app_id");
   
            AdjustAdobeExtensionConfig config =
                  new AdjustAdobeExtensionConfig(AdjustAdobeExtensionConfig.ENVIRONMENT_SANDBOX);
            AdjustAdobeExtension.setConfiguration(config);
         } catch (Exception e) {
            Log.e("example", "Exception occurred during configuration: " + e.getMessage());
         }
   
         try {
         } catch (Exception e) {
            Log.e("example", "Exception occurred while registering Extension: " + e.getMessage());
         }
      }
   }
   ```
   {% /codeblock %}

1. Import the `com.adobe.marketing.mobile.Extension` class.

1. Within your `try` block, create a new list of the extensions you want to register. The example in this guide imports the `Analytics` and `Identity` extensions in addition to the `AdjustAdobeExtension`.

   {% deflist %}
   `extensions`: `List<Class<? extends Extension>>`

   : Your list of extensions.
   {% /deflist %}

   {% codeblock title="MainApp.java" highlight="{range: 31-34}" %}
   ```java
   import android.app.Application;
   import android.util.Log;
   
   import com.adjust.adobeextension.AdjustAdobeExtension;
   import com.adjust.adobeextension.AdjustAdobeExtensionConfig;
   import com.adobe.marketing.mobile.Extension;
   import com.adobe.marketing.mobile.Analytics;
   import com.adobe.marketing.mobile.Identity;
   import com.adobe.marketing.mobile.LoggingMode;
   import com.adobe.marketing.mobile.MobileCore;
   
   public class MainApp extends Application {
      @Override
      public void onCreate() {
         super.onCreate();
   
         MobileCore.setApplication(this);
         MobileCore.setLogLevel(LoggingMode.VERBOSE);
   
         try {
            MobileCore.configureWithAppID("your_adobe_app_id");
   
            AdjustAdobeExtensionConfig config =
                  new AdjustAdobeExtensionConfig(AdjustAdobeExtensionConfig.ENVIRONMENT_SANDBOX);
            AdjustAdobeExtension.setConfiguration(config);
         } catch (Exception e) {
            Log.e("example", "Exception occurred during configuration: " + e.getMessage());
         }
   
         try {
            List<Class<? extends Extension>> extensions = Arrays.asList(
                  Analytics.EXTENSION,
                  Identity.EXTENSION,
                  AdjustAdobeExtension.EXTENSION);
         } catch (Exception e) {
            Log.e("example", "Exception occurred while registering Extension: " + e.getMessage());
         }
      }
   }
   ```
   {% /codeblock %}

1. Import the `com.adobe.marketing.mobile.AdobeCallback` class and call the `MobileCore.registerExtensions` method with your list of extensions and the following callback argument:

   {% deflist %}
   `completionCallback`: `AdobeCallback`

   : A callback function that fires when registration completes.
   {% /deflist %}

   {% codeblock title="MainApp.java" highlight="{range: 36-41}" %}
   ```java
   import android.app.Application;
   import android.util.Log;
   
   import com.adjust.adobeextension.AdjustAdobeExtension;
   import com.adjust.adobeextension.AdjustAdobeExtensionConfig;
   import com.adobe.marketing.mobile.AdobeCallback;
   import com.adobe.marketing.mobile.Extension;
   import com.adobe.marketing.mobile.Analytics;
   import com.adobe.marketing.mobile.Identity;
   import com.adobe.marketing.mobile.LoggingMode;
   import com.adobe.marketing.mobile.MobileCore;
   
   public class MainApp extends Application {
      @Override
      public void onCreate() {
         super.onCreate();
   
         MobileCore.setApplication(this);
         MobileCore.setLogLevel(LoggingMode.VERBOSE);
   
         try {
            MobileCore.configureWithAppID("your_adobe_app_id");
   
            AdjustAdobeExtensionConfig config =
                  new AdjustAdobeExtensionConfig(AdjustAdobeExtensionConfig.ENVIRONMENT_SANDBOX);
            AdjustAdobeExtension.setConfiguration(config);
         } catch (Exception e) {
            Log.e("example", "Exception occurred during configuration: " + e.getMessage());
         }
   
         try {
            List<Class<? extends Extension>> extensions = Arrays.asList(
                  Analytics.EXTENSION,
                  Identity.EXTENSION,
                  AdjustAdobeExtension.EXTENSION);
            MobileCore.registerExtensions(extensions, new AdobeCallback<Object>() {
               @Override
               public void call(Object o) {
                  Log.d("example", "Adjust Adobe Extension SDK initialized");
               }
            });
         } catch (Exception e) {
            Log.e("example", "Exception occurred while registering Extension: " + e.getMessage());
         }
      }
   }
   ```
   {% /codeblock %}

### Set up your activity file {% #set-up-your-activity-file %}

Next, you need to set up your `MainActivity.java` file. You'll use this file to set up your Adjust features later. For the purposes of this guide, you're only going to set up the `onCreate` function to handle application startup.

1. Create a new file called `MainActivity.java` in the same directory as your `MainApp.java`, if you haven't already.

1. Import the `androidx.appcompat.app.AppCompatActivity` class at the top of your file. You'll use this as teh basis for your `MainActivity` class. See the [`AppCompatActivity` documentation](https://developer.android.com/reference/androidx/appcompat/app/AppCompatActivity) for reference.

   {% codeblock title="MainActivity.java" highlight="{range: 1}" %}
   ```java
   import androidx.appcompat.app.AppCompatActivity;
   ```
   {% /codeblock %}

1. Create a new public class called `MainActivity`. This class should extend the `AppCompatActivity` class.

   {% codeblock title="MainActivity.java" highlight="{range: 3}" %}
   ```java
   import androidx.appcompat.app.AppCompatActivity;
   
   public class MainActivity extends AppCompatActivity {}
   ```
   {% /codeblock %}

1. Import the `com.adjust.adobeextension.AdjustAdobeExtension` class. You'll use this to configure features from the Adjust Extension.

   {% codeblock title="MainActivity.java" highlight="{range: 3}" %}
   ```java
   import androidx.appcompat.app.AppCompatActivity;
   
   import adjust.adobeextension.AdjustAdobeExtension;
   
   public class MainActivity extends AppCompatActivity {}
   ```
   {% /codeblock %}

1. Import the `android.os.Bundle` and `android.view.View` classes. You'll use these to type your function arguments.

   {% codeblock title="MainActivity.java" highlight="{range: 1-2}" %}
   ```java
   import android.os.Bundle;
   import android.view.View;
   
   import androidx.appcompat.app.AppCompatActivity;
   
   import adjust.adobeextension.AdjustAdobeExtension;
   
   public class MainActivity extends AppCompatActivity {}
   ```
   {% /codeblock %}

1. Create a new protected override function called `onCreate`. This function receives the `savedInstanceState` and returns `void`.

   {% codeblock title="MainActivity.java" highlight="{range: 9-10}" %}
   ```java
   import android.os.Bundle;
   import android.view.View;
   
   import androidx.appcompat.app.AppCompatActivity;
   
   import adjust.adobeextension.AdjustAdobeExtension;
   
   public class MainActivity extends AppCompatActivity {
      @Override
      protected void onCreate(Bundle savedInstanceState) {}
   }
   ```
   {% /codeblock %}

1. Within your `onCreate` function, call `super.onCreate` with the `savedInstanceState` to create your activity.

   {% codeblock title="MainActivity.java" highlight="{range: 11}" %}
   ```java
   import android.os.Bundle;
   import android.view.View;
   
   import androidx.appcompat.app.AppCompatActivity;
   
   import adjust.adobeextension.AdjustAdobeExtension;
   
   public class MainActivity extends AppCompatActivity {
      @Override
      protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
      }
   }
   ```
   {% /codeblock %}

1. Next, call `setContentView` to map your activity to your app layout. In this example, the layout file is called `activity_main.xml`.

   {% codeblock title="MainActivity.java" highlight="{range: 12}" %}
   ```java
   import android.os.Bundle;
   import android.view.View;
   
   import androidx.appcompat.app.AppCompatActivity;
   
   import adjust.adobeextension.AdjustAdobeExtension;
   
   public class MainActivity extends AppCompatActivity {
      @Override
      protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
         setContentView(R.layout.activity_main);
      }
   }
   ```
   {% /codeblock %}

### Set up deep link handling {% #set-up-deep-link-handling %}

To handle deep links with the Adjust Android Extension for Adobe Experience SDK, follow these steps:

1. In your `MainActivity.java` file, import the `android.content.Intent` and `android.net.Uri` classes.

   {% codeblock title="MainActivity.java" highlight="{range: 1-2}" %}
   ```java
   import android.content.Intent;
   import android.net.Uri;
   import android.os.Bundle;
   import android.view.View;
   
   import androidx.appcompat.app.AppCompatActivity;
   
   import adjust.adobeextension.AdjustAdobeExtension;
   
   public class MainActivity extends AppCompatActivity {
      @Override
      protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
         setContentView(R.layout.activity_main);
      }
   }
   ```
   {% /codeblock %}

1. Create a new `Intent` variable called `intent` and assign it the output of `getIntent()`.

   {% codeblock title="MainActivity.java" highlight="{range: 16}" %}
   ```java
   import android.content.Intent;
   import android.net.Uri;
   import android.os.Bundle;
   import android.view.View;
   
   import androidx.appcompat.app.AppCompatActivity;
   
   import adjust.adobeextension.AdjustAdobeExtension;
   
   public class MainActivity extends AppCompatActivity {
      @Override
      protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
         setContentView(R.layout.activity_main);
   
         Intent intent = getIntent();
      }
   }
   ```
   {% /codeblock %}

1. Create a new `Uri` variable called `data` and assign it the output of `intent.getData()`.

   {% codeblock title="MainActivity.java" highlight="{range: 17}" %}
   ```java
   import android.content.Intent;
   import android.net.Uri;
   import android.os.Bundle;
   import android.view.View;
   
   import androidx.appcompat.app.AppCompatActivity;
   
   import adjust.adobeextension.AdjustAdobeExtension;
   
   public class MainActivity extends AppCompatActivity {
      @Override
      protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
         setContentView(R.layout.activity_main);
   
         Intent intent = getIntent();
         Uri data = intent.getData();
      }
   }
   ```
   {% /codeblock %}

1. Import the `com.adjust.sdk.Adjust` and `com.adjust.sdk.AdjustDeeplink` classes. You'll use these to create and send your deep link.

   {% codeblock title="MainActivity.java" highlight="{range: 8-9}" %}
   ```java
   import android.content.Intent;
   import android.net.Uri;
   import android.os.Bundle;
   import android.view.View;
   
   import androidx.appcompat.app.AppCompatActivity;
   
   import com.adjust.sdk.Adjust;
   import com.adjust.sdk.AdjustDeeplink;
   
   public class MainActivity extends AppCompatActivity {
      @Override
      protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
         setContentView(R.layout.activity_main);
   
         Intent intent = getIntent();
         Uri data = intent.getData();
      }
   }
   ```
   {% /codeblock %}

1. Construct a new `AdjustDeeplink` instance with your `data` variable.

   {% codeblock title="MainActivity.java" highlight="{range: 18}" %}
   ```java
   import android.content.Intent;
   import android.net.Uri;
   import android.os.Bundle;
   import android.view.View;
   
   import androidx.appcompat.app.AppCompatActivity;
   
   import adjust.adobeextension.AdjustAdobeExtension;
   
   public class MainActivity extends AppCompatActivity {
      @Override
      protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
         setContentView(R.layout.activity_main);
   
         Intent intent = getIntent();
         Uri data = intent.getData();
         AdjustDeeplink adjustDeeplink = new AdjustDeeplink(data);
      }
   }
   ```
   {% /codeblock %}

1. To open the URL, pass your `AdjustDeeplink` instance and `getApplicationContext()` to the `Adjust.processDeeplink` method.

   {% codeblock title="MainActivity.java" highlight="{range: 20}" %}
   ```java
   import android.content.Intent;
   import android.net.Uri;
   import android.os.Bundle;
   import android.view.View;
   
   import androidx.appcompat.app.AppCompatActivity;
   
   import com.adjust.sdk.Adjust;
   import com.adjust.sdk.AdjustDeeplink;
   
   public class MainActivity extends AppCompatActivity {
      @Override
      protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
         setContentView(R.layout.activity_main);
   
         Intent intent = getIntent();
         Uri data = intent.getData();
         AdjustDeeplink adjustDeeplink = new AdjustDeeplink(data);
         Adjust.processDeeplink(adjustDeeplink, getApplicationContext());
      }
   }
   ```
   {% /codeblock %}

   If you use [short branded links](https://help.adjust.com/en/article/short-branded-links), you can alternatively use the `Adjust.processAndResolveDeeplink` method to resolve your shortened link and return it to a callback function.

   {% codeblock title="MainActivity.java" highlight="{range: 20-25}" %}
   ```java
   import android.content.Intent;
   import android.net.Uri;
   import android.os.Bundle;
   import android.view.View;
   
   import androidx.appcompat.app.AppCompatActivity;
   
   import com.adjust.sdk.Adjust;
   import com.adjust.sdk.AdjustDeeplink;
   
   public class MainActivity extends AppCompatActivity {
      @Override
      protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
         setContentView(R.layout.activity_main);
   
         Intent intent = getIntent();
         Uri data = intent.getData();
         AdjustDeeplink adjustDeeplink = new AdjustDeeplink(data);
         Adjust.processAndResolveDeeplink(adjustDeeplink, getApplicationContext(), new OnDeeplinkResolvedListener() {
            @Override
            public void onDeeplinkResolved(String s) {
               Log.d("example", "Unwrapped short link: " + s);
            }
         });
      }
   }
   ```
   {% /codeblock %}

Once you've completed these steps, build and run your app. In your log viewer, set the filter `tag:Adjust` to show only logs relating to the Adjust Extension. After you launch your app, you should see the message `Install tracked`.
