---
title: Set up an attribution callback
description: Set up an attribution callback to respond to attribution changes.
sidebar-position: 2
---

When Adjust receives install data from the Adjust iOS Extension for Adobe Experience SDK, the device is attributed to the source of the install. This attribution information can change if the user is retargeted or interacts with another campaign.

You can configure a callback function to respond to attribution changes. When Adjust receives new attribution information, it sends the data asynchronously back to the device. The callback function receives the device's attribution data as an argument.

Read Adjust's [attribution data policies](https://github.com/adjust/sdks/blob/master/doc/attribution-data.md) for more information about attribution data.

## Reference {% #reference %}

To set a callback function to listen for attribution changes, call the `setAttributionChangedBlock` method of your `AdjustAdobeExtensionConfig` instance with the following argument:

{% deflist %}
`attributionChangedBlock`: `OnAttributionChangedListener`

: A function that returns `void` and receives device attribution information as a serialized `ADJAttribution` object.
{% /deflist %}

## Tutorial: Create an attribution callback {% #tutorial %}

To configure an attribution callback, you need to create a function and assign it to your `AdjustAdobeExtensionConfig` instance. In this tutorial, you'll build on `MainApp.java` from the [integration guide](/en/sdk/adobe-extension/android/integration) and add an `onAttributionChanged` callback function that outputs the user's attribution information to logs as a string. The final result looks like this:

{% tabs %}
{% tab title="Swift" sync="swift" %}
```swift
// AppDelegate.swift
import UIKit
import AEPCore
import AEPServices
import AdjustAdobeExtension

@main
class AppDelegate: UIResponder, UIApplicationDelegate {

   func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {
      MobileCore.setLogLevel(LogLevel.trace)
      let appState = application.applicationState

      if let config = AdjustAdobeExtensionConfig(environment: ADJEnvironmentSandbox) {
         AdjustAdobeExtension.setConfiguration(config)
      }

      MobileCore.registerExtensions([AdjustAdobeExtension.self]) {
         MobileCore.configureWith(appId: "{your_adobe_app_id}")
         if appState != .background {
               MobileCore.lifecycleStart(additionalContextData: nil)
         }
      }
      return true
   }

    func application(_ app: UIApplication, open url: URL, options: [UIApplication.OpenURLOptionsKey : Any] = [:]) -> Bool {
        return AdjustAdobeExtension.application(app, open: url, options: options)
    }

    func application(_ application: UIApplication, continue userActivity: NSUserActivity, restorationHandler: @escaping ([UIUserActivityRestoring]?) -> Void) -> Bool {
        return AdjustAdobeExtension.application(application, continue: userActivity)
    }
}
```
{% /tab %}

{% tab title="Objective-C" sync="objc" %}
```objc
// AppDelegate.m
#import "AppDelegate.h"
@import AEPCore;
@import AEPServices;
#import <AdjustAdobeExtension/AdjustAdobeExtension.h>

@implementation AppDelegate

- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {
    [AEPMobileCore setLogLevel: AEPLogLevelTrace];
    const UIApplicationState appState = application.applicationState;

    // Adjust Adobe Extension configuration
    AdjustAdobeExtensionConfig *config = [AdjustAdobeExtensionConfig configWithEnvironment:{environment}];
    [AdjustAdobeExtension setConfiguration:config];

    // Adjust Adobe Extension registration
    [AEPMobileCore registerExtensions:@[AdjustAdobeExtension.class]
                           completion:^{
        [AEPMobileCore configureWithAppId: @"{your_adobe_app_id}"];

        if (appState != UIApplicationStateBackground) {
            // only start lifecycle if the application is not in the background
            [AEPMobileCore lifecycleStart:nil];
        }
    }];

    return YES;
}

- (BOOL)application:(UIApplication *)app openURL:(NSURL *)url options:(NSDictionary<UIApplicationOpenURLOptionsKey,id> *)options {
    return [AdjustAdobeExtension application:app openURL:url options:options];
}

- (BOOL)application:(UIApplication *)application
continueUserActivity:(NSUserActivity *)userActivity
 restorationHandler:(void (^)(NSArray<id<UIUserActivityRestoring>> * _Nullable))restorationHandler {
    return [AdjustAdobeExtension application:application
                        continueUserActivity:userActivity];
}
@end
```
{% /tab %}
{% /tabs %}

Here's what you need to do:

1. Inside the `try...catch` block, call the `setOnAttributionChangedListener` method of your `AdjustAdobeExtensionConfig` instance. Pass an `OnAttributionChangedListener` instance as an argument.

   {% codeblock highlight="{range: 6}" startLineNumber=21 %}
   ```java
   try {
       MobileCore.configureWithAppID("your_adobe_app_id");
   
       AdjustAdobeExtensionConfig config =
           new AdjustAdobeExtensionConfig(AdjustAdobeExtensionConfig.ENVIRONMENT_SANDBOX);
       config.setOnAttributionChangedListener(new OnAttributionChangedListener() {});
       AdjustAdobeExtension.setConfiguration(config);
   } catch (Exception e) {
       Log.e("example", "Exception occurred during configuration: " + e.getMessage());
   }
   ```
   {% /codeblock %}

1. Create a new public function called `onAttributionChanged` inside your `setOnAttributionChangedListener` declaration. This method takes an `AdjustAttribution` argument and returns `void`.

   {% codeblock
      title="MainApp.java"
      highlight="{range: 3}"
      startLineNumber=26 %}
   ```java
   config.setOnAttributionChangedListener(new OnAttributionChangedListener() {
       @Override
       public void onAttributionChanged(AdjustAttribution adjustAttribution) {}
   });
   ```
   {% /codeblock %}

1. Inside the `onAttributionChanged` function body, log the `AdjustAttribution` object by converting it to a string.

   {% codeblock
      title="MainApp.java"
      highlight="{range: 4-5}"
      startLineNumber=26 %}
   ```java
   config.setOnAttributionChangedListener(new OnAttributionChangedListener() {
       @Override
       public void onAttributionChanged(AdjustAttribution adjustAttribution) {
           Log.d("example", "Attribution information updated");
           Log.d("example", "Attribution: " + attribution.toString());
       }
   });
   ```
   {% /codeblock %}

That's it! When a user's attribution information changes, this callback function writes out the updated attribution information to the system log.
