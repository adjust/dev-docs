---
title: Configure external device ID
description: Use external device IDs to enhance your reporting.
sidebar-position: 4
---

An [external device identifier](https://help.adjust.com/en/article/external-device-identifiers) is a custom value that you can assign to a device or user. This helps you recognize users across sessions and platforms. External device IDs also help you deduplicate installs by user, to avoid counting multiple new installs assoiciated with the same user.

Using external device IDs can produce different results depending on your setup. If you want to use them, contact your Adjust representative. They will talk you through the best approach for your use case.

You must set your external device ID in your `AdjustAdobeExtensionConfig` instance before you call `setConfiguration`. You can't change this property after you've initialized the extension.

## Reference {% #reference %}

To set an external device ID, call the `setExternalDeviceId` method of your `AdjustAdobeExtensionConfig` instance with the following argument:

{% deflist %}
`externalDeviceId`: `NSString`

: Your external device identifier.
{% /deflist %}

## Tutorial: Set an external device ID {% #tutorial %}

To set an external device ID, you need to set the ID using your `AdjustAdobeExtensionConfig` instance. If you followed the [integration guide](/en/sdk/adobe-extension/ios/integration), your App Delegate should look something like this:

{% tabs %}
{% tab title="Swift" sync="swift" %}
```swift
// AppDelegate.swift
import UIKit
import AEPCore
import AEPServices
import AdjustAdobeExtension

@main
class AppDelegate: UIResponder, UIApplicationDelegate {

   func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {
      MobileCore.setLogLevel(LogLevel.trace)
      let appState = application.applicationState

      if let config = AdjustAdobeExtensionConfig(environment: ADJEnvironmentSandbox) {
         AdjustAdobeExtension.setConfiguration(config)
      }

      MobileCore.registerExtensions([AdjustAdobeExtension.self]) {
         MobileCore.configureWith(appId: "{your_adobe_app_id}")
         if appState != .background {
               MobileCore.lifecycleStart(additionalContextData: nil)
         }
      }
      return true
   }

    func application(_ app: UIApplication, open url: URL, options: [UIApplication.OpenURLOptionsKey : Any] = [:]) -> Bool {
        if let deeplink = ADJDeeplink(deeplink: url) {
            Adjust.processDeeplink(deeplink)
        }
        return true
    }

    func application(_ application: UIApplication, continue userActivity: NSUserActivity, restorationHandler: @escaping ([UIUserActivityRestoring]?) -> Void) -> Bool {
        if userActivity.activityType == NSUserActivityTypeBrowsingWeb {
            if let incomingUrl = userActivity.webpageUrl {
                if let deeplink = ADJDeeplink(deeplink: incomingUrl) {
                    Adjust.processDeeplink(deeplink)
                }
            }
        }
        return true
    }
}
```
{% /tab %}

{% tab title="Objective-C" sync="objc" %}
```objc
// AppDelegate.m
#import "AppDelegate.h"
@import AEPCore;
@import AEPServices;
#import <AdjustAdobeExtension/AdjustAdobeExtension.h>

@implementation AppDelegate

- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {
    [AEPMobileCore setLogLevel: AEPLogLevelTrace];
    const UIApplicationState appState = application.applicationState;

    AdjustAdobeExtensionConfig *config = [AdjustAdobeExtensionConfig configWithEnvironment:ADJEnvironmentSandbox];
    [AdjustAdobeExtension setConfiguration:config];

    [AEPMobileCore registerExtensions:@[AdjustAdobeExtension.class]
                           completion:^{
        [AEPMobileCore configureWithAppId: @"{your_adobe_app_id}"];

        if (appState != UIApplicationStateBackground) {
            [AEPMobileCore lifecycleStart:nil];
        }
    }];

    return YES;
}

- (BOOL)application:(UIApplication *)app openURL:(NSURL *)url options:(NSDictionary<UIApplicationOpenURLOptionsKey,id> *)options {
   [Adjust processDeeplink: [[ADJDeeplink alloc] initWithDeeplink:url]];
   return YES;
}

- (BOOL)application:(UIApplication *)application continueUserActivity:(NSUserActivity *)userActivity restorationHandler:(void (^)(NSArray<id<UIUserActivityRestoring>> * _Nullable))restorationHandler {
   if ([[userActivity activityType] isEqualToString:NSUserActivityTypeBrowsingWeb]) {
     [Adjust proceessDeeplink:[[ADJDeeplink alloc] initWithDeeplink:[userActivity webpageURL]]];
   }
   return YES;
}
@end
```
{% /tab %}
{% /tabs %}

To set a default link token for preinstalled apps, pass the link token to the `setExternalDeviceId` method of the `AdjustAdobeExtensionConfig` instance. The ID is sent to Adjust with each session.

In this example, the external device ID is set to _{% $variables.config.externalDeviceId %}_.

{% tabs %}
{% tab title="Swift" sync="swift" %}
{% codeblock
   title="AppDelegate.swift"
   highlight="{range: 2}"
   startLineNumber=13 %}
```swift
if let config = AdjustAdobeExtensionConfig(environment: ADJEnvironmentSandbox) {
   config.setExternalDeviceId("{% $variables.config.externalDeviceId %}")
   AdjustAdobeExtension.setConfiguration(config)
}
```
{% /codeblock %}
{% /tab %}

{% tab title="Objective-C" sync="objc" %}
{% codeblock
   title="AppDelegate.m"
   highlight="{range: 2}"
   startLineNumber=12 %}
```objc
AdjustAdobeExtensionConfig *config = [AdjustAdobeExtensionConfig configWithEnvironment:ADJEnvironmentSandbox];
[adjustConfig setExternalDeviceId:@"{% $variables.config.externalDeviceId %}"];
[AdjustAdobeExtension setConfiguration:config];
```
{% /codeblock %}
{% /tab %}
{% /tabs %}
