---
title: Send preinstalled app activity
sidebar-label: Configure preinstalled app
description: Configure a campaign to send information from preinstalled apps.
sidebar-position: 3
---

You can use the Adjust Android Extension for Adobe Experience SDK to send Adjust activity from apps that came preinstalled on a user's device. This enables you to send information from users who didn't download your app from a campaign.

You can send data from preinstalled apps to a predefined default link. When a user opens the app for the first time, the install session is associated with the default link token.

## Reference {% #reference %}

To set your default link token, call the `setDefaultTracker` method of your `AdjustAdobeExtensionConfig` instance with the following argument:

{% deflist %}
`token`: `NSString`

: Your alphanumeric Adjust link token.
{% /deflist %}

## Tutorial: Set a default link token {% #tutorial %}

To set your default link token, you need to add the token to your `AdjustAdobeExtensionConfig` instance. If you followed the [integration guide](/en/sdk/adobe-extension/ios/integration), your App Delegate file should look something like this:

{% tabs %}
{% tab title="Swift" sync="swift" %}
```swift
// AppDelegate.swift
import UIKit
import AEPCore
import AEPServices
import AdjustAdobeExtension

@main
class AppDelegate: UIResponder, UIApplicationDelegate {

   func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {
      MobileCore.setLogLevel(LogLevel.trace)
      let appState = application.applicationState

      if let config = AdjustAdobeExtensionConfig(environment: ADJEnvironmentSandbox) {
         AdjustAdobeExtension.setConfiguration(config)
      }

      MobileCore.registerExtensions([AdjustAdobeExtension.self]) {
         MobileCore.configureWith(appId: "{your_adobe_app_id}")
         if appState != .background {
               MobileCore.lifecycleStart(additionalContextData: nil)
         }
      }
      return true
   }

    func application(_ app: UIApplication, open url: URL, options: [UIApplication.OpenURLOptionsKey : Any] = [:]) -> Bool {
        if let deeplink = ADJDeeplink(deeplink: url) {
            Adjust.processDeeplink(deeplink)
        }
        return true
    }

    func application(_ application: UIApplication, continue userActivity: NSUserActivity, restorationHandler: @escaping ([UIUserActivityRestoring]?) -> Void) -> Bool {
        if userActivity.activityType == NSUserActivityTypeBrowsingWeb {
            if let incomingUrl = userActivity.webpageUrl {
                if let deeplink = ADJDeeplink(deeplink: incomingUrl) {
                    Adjust.processDeeplink(deeplink)
                }
            }
        }
        return true
    }
}
```
{% /tab %}

{% tab title="Objective-C" sync="objc" %}
```objc
// AppDelegate.m
#import "AppDelegate.h"
@import AEPCore;
@import AEPServices;
#import <AdjustAdobeExtension/AdjustAdobeExtension.h>

@implementation AppDelegate

- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {
    [AEPMobileCore setLogLevel: AEPLogLevelTrace];
    const UIApplicationState appState = application.applicationState;

    AdjustAdobeExtensionConfig *config = [AdjustAdobeExtensionConfig configWithEnvironment:ADJEnvironmentSandbox];
    [AdjustAdobeExtension setConfiguration:config];

    [AEPMobileCore registerExtensions:@[AdjustAdobeExtension.class]
                           completion:^{
        [AEPMobileCore configureWithAppId: @"{your_adobe_app_id}"];

        if (appState != UIApplicationStateBackground) {
            [AEPMobileCore lifecycleStart:nil];
        }
    }];

    return YES;
}

- (BOOL)application:(UIApplication *)app openURL:(NSURL *)url options:(NSDictionary<UIApplicationOpenURLOptionsKey,id> *)options {
   [Adjust processDeeplink: [[ADJDeeplink alloc] initWithDeeplink:url]];
   return YES;
}

- (BOOL)application:(UIApplication *)application continueUserActivity:(NSUserActivity *)userActivity restorationHandler:(void (^)(NSArray<id<UIUserActivityRestoring>> * _Nullable))restorationHandler {
   if ([[userActivity activityType] isEqualToString:NSUserActivityTypeBrowsingWeb]) {
     [Adjust proceessDeeplink:[[ADJDeeplink alloc] initWithDeeplink:[userActivity webpageURL]]];
   }
   return YES;
}
@end
```
{% /tab %}
{% /tabs %}

To set a default link token for preinstalled apps, pass the link token to the `setDefaultTracker` method of the `AdjustAdobeExtensionConfig` instance. When Adjust receives the install session information, it attributes the install to the default link.

In this example, the external device ID is set to _abc123_.

{% tabs %}
{% tab title="Swift" sync="swift" %}
{% codeblock
   title="AppDelegate.swift"
   highlight="{range: 2}"
   startLineNumber=13 %}
```swift
if let config = AdjustAdobeExtensionConfig(environment: ADJEnvironmentSandbox) {
   config.setDefaultTracker("abc123")
   AdjustAdobeExtension.setConfiguration(config)
}
```
{% /codeblock %}
{% /tab %}

{% tab title="Objective-C" sync="objc" %}
{% codeblock
   title="AppDelegate.m"
   highlight="{range: 2}"
   startLineNumber=12 %}
```objc
AdjustAdobeExtensionConfig *config = [AdjustAdobeExtensionConfig configWithEnvironment:ADJEnvironmentSandbox];
[adjustConfig setDefaultTracker:@"abc123"];
[AdjustAdobeExtension setConfiguration:config];
```
{% /codeblock %}
{% /tab %}
{% /tabs %}
