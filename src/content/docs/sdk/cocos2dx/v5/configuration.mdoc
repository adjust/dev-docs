---
title: Configuration
description: Follow the guides in this section to configure the Adjust SDK.
category-title: Configuration
slug: en/sdk/cocos2dx/configuration
sidebar-position: 1
versions:
   - label: v5
     value: v5
     default: true
   - label: v4
     value: v4
redirects:
   v4: /en/sdk/cocos2dx/v4/configuration
---

Use the methods in this document to configure the behavior of the Adjust SDK.

## Instantiate your config object {% #instantiate-your-config-object %}

To configure the Adjust SDK, you need to instantiate an `AdjustConfig2dx` object. This object contains the **read-only** configuration options that you need to pass to the Adjust SDK.

To instantiate your config object, create a new `AdjustConfig2dx` instance and pass the following parameters:

- `appToken` (`String`): Your [Adjust app token](https://help.adjust.com/en/article/app-token-and-reporting-currency#view-your-app-details).
- `environment` (`String`): The environment you want to run the SDK in. Pass `AdjustEnvironmentSandbox2dx` to run the SDK in sandbox mode for testing. Pass `AdjustEnvironmentProduction2dx` to run the SDK in production mode for release.
- `allowSuppressLogLevel` (`Boolean`): Whether to suppress all logging. Set to `true` to suppress logging or `false` to enable logging.

```cpp
#include "Adjust/Adjust2dx.h"

std::string appToken = "{% $variables.config.token %}";
std::string environment = AdjustEnvironmentSandbox2dx;

AdjustConfig2dx adjustConfig = AdjustConfig2dx(appToken, environment, false);
Adjust2dx::initSdk(adjustConfig);
```

## Read-only configuration {% #read-only-configuration %}

**Read-only** configuration options are set in your `AdjustConfig2dx` instance **before** the initialization of the SDK. They can't be changed while the SDK is running. You MUST configure any options you want to use before running `Adjust2dx::initSdk()`.

### Set your logging level {% #set-your-logging-levelt %}

The Adjust SDK provides configurable log levels to return different amounts of information. The following log levels are available:

| Log level                                  | Description                                |
| ------------------------------------------ | ------------------------------------------ |
| `AdjustLogLevel2dxVerbose`                 | Enable all logging                         |
| `AdjustLogLevel2dxDebug`                   | Enable debug logging                       |
| `AdjustLogLevel2dxInfo`                    | Only show info level logs (default option) |
| `AdjustLogLevel2dxWarn`                    | Disable info logging                       |
| `AdjustLogLevel2dxError`                   | Disable warning level logging and below    |
| `AdjustLogLevel2dxAssert`                  | Disable error level logging and below      |
| `AdjustLogLevel2dxSuppress`                | Suppress all logging                       |

You can set your log level by calling the `setLogLevel` method on your `AdjustConfig2dx` instance with the following parameter:

- `logLevel` (`ADJLogLevel2dx`): The log level you want to use.

```cpp
std::string appToken = "{% $variables.config.token %}";
std::string environment = AdjustEnvironmentSandbox2dx;

AdjustConfig2dx adjustConfig = AdjustConfig2dx(appToken, environment, false);
adjustConfig.setLogLevel(AdjustLogLevel2dxSuppress);
Adjust2dx::initSdk(adjustConfig);
```

### Set external device identifier {% #set-external-device-id %}

{% callout type="seealso" %}
See the [External device identifiers article](https://help.adjust.com/en/article/external-device-identifiers) in the Adjust help center for more information.
{% /callout %}

An external device identifier is a custom value that you can assign to a device or user. They help you recognize users across sessions and platforms. They can also help you deduplicate installs by user so that a user isn't counted as duplicate new installs. Contact your Adjust representative to get started with external device IDs.

You can use an external device ID as a custom identifier for a device. This helps you keep continuity with your other systems. You can set property calling the `setExternalDeviceId` method with the following parameter:

- `externalDeviceId` (`String`): Your external device identifier. This value is **case sensitive**. If you have imported external device IDs, make sure the value you pass matches the imported value.

```cpp
AdjustConfig2dx adjustConfig = AdjustConfig2dx(appToken, environment);
adjustConfig.setExternalDeviceId("{% $variables.config.externalDeviceId %}");
Adjust2dx::initSdk(adjustConfig);
```

If you want to use the external device ID in your business analytics, you can pass it as a [session callback parameter](/en/sdk/cocos2dx/features/session-parameters).

You can import existing external device IDs into Adjust. This ensures that the Adjust servers match future data to your existing device records. Contact your Adjust representative for more information.

### Set default link token {% #set-default-link-token %}

You can configure a default link token if your app is preinstalled on a device. When a user opens the preinstalled app for the first time, the install is attributed to the default link token. To set your default link token, call the `setDefaultTracker` method of your `AdjustConfig2dx` instance with the following argument:

- `defaultTracker` (`String`): The [Adjust link token](https://help.adjust.com/en/article/links#adjust-link-token) you want to record preinstalled installs against.

```cpp
AdjustConfig2dx adjustConfig = AdjustConfig2dx(appToken, environment);
adjustConfig.setDefaultTracker("{% $variables.config.defaultLink %}");
Adjust2dx::initSdk(config);
```

### Receive ad spend data in attribution {% #receive-ad-spend-data %}

By default, the Adjust SDK doesn't send ad spend data as part of a user's attribution. You can configure the SDK to send this data by enabling cost data sending. To enable ad spend data sending, call the `enableCostDataInAttribution()` method of your `AdjustConfig2dx` instance.

Cost data is accessible in the user's [attribution information](/en/sdk/cocos2dx/features/attribution).

```cpp
AdjustConfig2dx adjustConfig = AdjustConfig2dx(appToken, environment);
adjustConfig.enableCostDataInAttribution();
Adjust2dx::initSdk(config);
```

### Enable background recording {% #enable-background-recording %}

By default, the Adjust SDK pauses the sending of requests when your app is running in the background. You can configure the SDK to send requests in the background by enabling the background recording. To enable background recording, call the `setSendInBackground` method of your `AdjustConfig2dx` instance.

```cpp
AdjustConfig2dx adjustConfig = AdjustConfig2dx(appToken, environment);
adjustConfig.setSendInBackground();
Adjust2dx::initSdk(adjustConfig);
```

## Dynamic configuration {% #dynamic-configuration %}

**Dynamic** configuration options may be changed during the SDK's lifecycle in response to events or actions taken by the user.

### Activate offline mode {% #activate-offline-mode %}

{% callout type="important" %}
The offline mode setting isn't remembered between sessions. Offline mode is disabled at the start of each new session.
{% /callout %}

The Adjust SDK sends event and session data to Adjust's servers in real time. You can pause the sending of information by putting the SDK in offline mode. In offline mode the SDK stores all data in a local file on the device. The SDK sends this information to Adjust's servers when you disable offline mode.

You can toggle offline mode at any time by calling the `Adjust2dx::switchToOfflineMode()` method.

```cpp
Adjust2dx::switchToOfflineMode();
```

### Deactivate offline mode {% #deactivate-offline-mode %}

You can re-enable the SDK by calling the `Adjust2dx::switchBackToOnlineMode()` method. This prompts the SDK to resume sending information.

```cpp
Adjust2dx::switchBackToOnlineMode();
```

### Set push tokens {% #set-push-tokens %}

Push tokens are used for [Audiences](https://help.adjust.com/en/article/audiences) and client callbacks. They're also required for [Uninstall and reinstall measurement](https://help.adjust.com/en/article/uninstalls-reinstalls).

You can update your push token at any time by calling the `Adjust2dx::setPushToken()` method with the following argument:

- `pushtoken` (`String`): Your push token.

```cpp
Adjust2dx::setPushToken("push-token");
```

### Disable the SDK {% #disable-the-sdk %}

The Adjust SDK runs by default when your app is open. You can disable the Adjust SDK to stop sending information to Adjust by calling the `Adjust2dx::disable()` method. When you disable the Adjust SDK, no data is sent to Adjust and no information is recorded by the SDK. This means that any Adjust method called when the SDK is disabled won't record anything.

```cpp
Adjust2dx::disable();
```

### Enable the SDK {% #enable-the-sdk %}

If you've disable the SDK and want to re-enable it, call the `Adjust2dx::enable()` method. When the SDK is enabled, it will send information to Adjust's servers.

```cpp
Adjust2dx::enable();
```

#### Check enabled status {% #check-enabled-status %}

You can check if the Adjust SDK is enabled at any time by calling the `Adjust2dx::isEnabled()` method and passing a callback function. The status is returned asynchronously and passed to your callback function as a `bool` value.

```cpp
Adjust2dx::isEnabled([](bool isEnabled) {
   // process isEnabled
});
```
