---
title: Send ad revenue information
description: Send ad revenue information for supported network partners using the Adjust SDK.
slug: en/sdk/cocos2dx/features/ad-revenue
versions:
   - label: v5
     value: v5
     default: true
   - label: v4
     value: v4
redirects:
   v4: /en/sdk/cocos2dx/v4/features/ad-revenue
---

{% callout type="important" %}
You need to perform some extra setup steps in your Adjust dashboard to measure ad revenue. Contact your Technical Account Manager or support@adjust.com to get started.
{% /callout %}

You can use the Adjust SDK to send ad revenue information from [supported network partners](https://help.adjust.com/en/article/ad-revenue) to Adjust.

## Instantiate an ad revenue object {% #instantiate-an-ad-revenue-object %}

To send ad revenue information with the Adjust SDK, you need to instantiate an `AdjustAdRevenue2dx` object. This object contains variables that are sent to Adjust when ad revenue is recorded in your app.

To instantiate an ad revenue object, instantiate an `AdjustAdRevenue2dx` objec with the following parameter:

- `source` (`String`): The source of the ad revenue. See the table below for all available sources.

| Parameter                 | Source                    |
| ------------------------- | ------------------------- |
| `"applovin_max_sdk"`      | AppLovin MAX              |
| `"admob_sdk"`             | AdMob                     |
| `"ironsource_sdk"`        | ironSource                |
| `"admost_sdk"`            | AdMost                    |
| `"unity_sdk"`             | Unity                     |
| `"helium_chartboost_sdk"` | Helium Chartboost         |
| `"adx_sdk"`               | Ad(X)                     |
| `"tradplus_sdk"`          | TradPlus                  |
| `"topon_sdk"`             | TopOn                     |
| `"publisher_sdk"`         | Generic source            |

Once you've instantiated your ad revenue object, set the ad revenue amount by calling the `setRevenue` method with the following arguments:

- `amount` (`double`): The amount of ad revenue to be recorded.
- `currency` (`string`): The currency of the ad revenue. You MUST format this as a 3 character [ISO 4217 code](https://www.iban.com/currency-codes)

```cpp
AdjustAdRevenue2dx adjustAdRevenue = AdjustAdRevenue2dx("applovin_max_sdk");
adjustAdRevenue.setRevenue(1.00, "EUR");
```

## Set additional properties {% #set-additional-properties %}

To provide more information about ad revenue, you can set any of the following properties on your `AdjustAdRevenue2dx` instance.

### Ad campaign details {% #ad-campaign-details %}

You can provide additional details about the campaign associated with your `AdjustAdRevenue2dx` instance by populating various properties. This information is available in Datascape reports and raw data exports.

#### Ad impressions

To send the number of recorded ad impressions, call the `setAdImpressionsCount` method of your `AdjustAdRevenue2dx` instance with the following argument:

- `setAdImpressionsCount` (`int`): The number of ad impressions.

```cpp
AdjustAdRevenue2dx adjustAdRevenue = AdjustAdRevenue2dx("applovin_max_sdk");
adjustAdRevenue.setAdImpressionsCount(10);
```

#### Ad revenue network

To send the network associated with ad revenue, call the `setAdRevenueNetwork` method of your `AdjustAdRevenue2dx` instance with the following argument:

- `adRevenueNetwork` (`string`): The name of the network associated with the ad revenue.

```cpp
AdjustAdRevenue2dx adjustAdRevenue = AdjustAdRevenue2dx("applovin_max_sdk");
adjustAdRevenue.adRevenueNetwork("network");
```

#### Ad revenue unit

To send the advertising unit that earned the revenue, call the `setAdRevenueUnit` method of your `AdjustAdRevenue2dx instance with the following argument:

- `adRevenueUnit` (`string`): The name of the ad unit associated with the ad revenue.

```cpp
AdjustAdRevenue2dx adjustAdRevenue = AdjustAdRevenue2dx("applovin_max_sdk");
adjustAdRevenue.adRevenueUnit("unit1");
```

#### Ad revenue placement

To send the placement of the ad unit, call the `setAdRevenuePlacement` method with the following argument:

- `adRevenuePlacement` (`string`): The placement of the ad unit.

```cpp
AdjustAdRevenue2dx adjustAdRevenue = AdjustAdRevenue2dx("applovin_max_sdk");
adjustAdRevenue.setAdRevenuePlacement("banner");
```

### Callback parameters {% #callback-parameters %}

If you [register a callback URL](https://help.adjust.com/en/article/recommended-placeholders-callbacks) in the Adjust dashboard, the SDK sends a `GET` request to your callback URL when it records an event.

You can configure callback parameters to your servers. Once you configure parameters on an event, the SDK appends them to your [callback URL](https://help.adjust.com/en/article/raw-data-exports). You can use this information to analyze your users' in-app behavior with your BI system.

Add callback parameters to your event by calling the `addCallbackParameter` method with `string` key-value arguments. You can add multiple parameters by calling this method multiple times.

The Adjust SDK measures the event and sends a request to your URL with the callback parameters. For example, if you register the URL `https://www.mydomain.com/callback`, your callback looks like this:

{% codeblock highlight="key=value, foo=bar" %}
```http
https://www.mydomain.com/callback?key=value&foo=bar
```
{% /codeblock %}

{% callout type="note" %}
Adjust doesn't store your custom callback parameters. Custom parameters are only appended to your callback URL.
{% /callout %}

If you are using CSV uploads, make sure to add the parameters to your CSV definition.

Adjust supports many placeholders which you can use to pass information from the SDK to your URL. For example, the `{idfa}` placeholder for iOS and the `{gps_adid}` placeholder for Android. The `{publisher_parameter}` placeholder presents all callback parameters in a single string.

{% callout type="seealso" %}
You can read more about using URL callbacks, including a full list of available values, in the [callbacks guide](https://help.adjust.com/en/article/callbacks).
{% /callout %}

```cpp
AdjustAdRevenue2dx adjustAdRevenue = AdjustAdRevenue2dx("applovin_max_sdk");
adjustAdRevenue.addCallbackParameter("key", "value");
adjustAdRevenue.addCallbackParameter("foo", "bar");
```

### Partner parameters {% #partner-parameters %}

You can send extra information to your network partners by adding [partner parameters](https://help.adjust.com/en/article/data-sharing-ad-network#map-parameters).

Adjust sends partner parameters to [external partners](https://help.adjust.com/en/article/integrated-partners) you have set up. This information is useful for more granular analysis and retargeting purposes. Adjust's servers forward these parameters once you have set them up and enabled them for a partner.

{% callout type="note" %}
Partner parameters don't appear in raw data by default. You can add the `{partner_parameters}` placeholder to receive them as a single string.
{% /callout %}

Add partner parameters to your event by calling the `addPartnerParameter` method with `string` key-value arguments. You can add multiple parameters by calling this method multiple times.

```cpp
AdjustAdRevenue2dx adjustAdRevenue = AdjustAdRevenue2dx("applovin_max_sdk");
adjustAdRevenue.addPartnerParameter("key", "value");
adjustAdRevenue.addPartnerParameter("foo", "bar");
```

## Send ad revenue {% #send-ad-revenue %}

Once you've populated your `AdjustAdRevenue2dx` instance, pass it as an argument to the `Adjust2dx::trackAdRevenue()` to send the ad revenue information to Adjust.

```cpp
AdjustAdRevenue2dx adjustAdRevenue = AdjustAdRevenue2dx("applovin_max_sdk");
adjustAdRevenue.setRevenue(1, "EUR");
adjustAdRevenue.setAdImpressionsCount(10);
adjustAdRevenue.setAdRevenueNetwork("network1");
adjustAdRevenue.setAdRevenueUnit("unit1");
adjustAdRevenue.setAdRevenuePlacement("banner");
adjustAdRevenue.addCallbackParameter("key1", "value1");
adjustAdRevenue.addPartnerParameter("key2", "value2");
Adjust2dx::trackAdRevenueNew(adjustAdRevenue);
```
