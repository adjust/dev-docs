---
title: 配置
description: 请按照本节中的说明配置 Adjust SDK。
category-title: 配置
slug: zh/sdk/cocos2dx/configuration
sidebar-position: 1
versions:
- label: v5
  value: v5
  default: true
- label: v4
  value: v4
redirects:
  v4: /zh/sdk/cocos2dx/v4/configuration
---

请使用该文档中的方法配置 Adjust SDK 行为。

## 实例化 config 对象{% #instantiate-your-config-object %}

要配置 Adjust SDK，您需要实例化一个 `AdjustConfig2dx` 对象。该对象包含 **只读** 配置选项。请将这些配置选项发送给 Adjust SDK。

要实例化您的 config 对象，请创建新的 `AdjustConfig2dx` 实例，并传送下列参数：

{% deflist %}
`appToken` (`std::string`)

: 您的 [Adjust 应用识别码](https://help.adjust.com/zh/article/app-token-and-reporting-currency#view-your-app-details)。

`environment` (`std::string`)

: SDK 运行的环境。

- 传送 `AdjustEnvironmentSandbox2dx`，可在 sandbox 模式下运行 SDK，方便进行测试；
- 传递 `AdjustEnvironmentProduction2dx`，可在生产模式下运行 SDK，方便发布。
{% /deflist %}

您也可以发送下列可选参数：

{% deflist %}
`allowSuppressLogLevel` (`bool`)

: 是否禁用所有日志记录。设为 `true` 可禁用日志记录；设为 `false` 可启用日志记录。
{% /deflist %}

```cpp
#include "Adjust/Adjust2dx.h"

std::string appToken = "{% $variables.config.token %}";
std::string environment = AdjustEnvironmentSandbox2dx;

AdjustConfig2dx adjustConfig = AdjustConfig2dx(appToken, environment, false);
Adjust2dx::initSdk(adjustConfig);
```

## 只读配置{% #read-only-configuration %}

**只读** 配置选项需要在 SDK 初始化 **之前** 在 `AdjustConfig2dx` 实例中设定。这些配置选项无法在 SDK 运行过程中变更。请务必在运行 `Adjust2dx::initSdk` 之前配置要使用的所有设置。

### 设置日志级别{% #set-your-logging-levelt %}

通过 Adjust SDK，您可以配置不同日志级别，返回不同数量的信息。可用的日志级别包括：

| logLevel                    | 描述                          |
| --------------------------- | --------------------------- |
| `AdjustLogLevel2dxVerbose`  | 启用完整日志                      |
| `AdjustLogLevel2dxDebug`    | 启用调试记录                      |
| `AdjustLogLevel2dxInfo`     | 仅显示信息级别日志 (默认选项)            |
| `AdjustLogLevel2dxWarn`     | 禁用信息日志                      |
| `AdjustLogLevel2dxError`    | 禁用警告及更低级别日志                 |
| `AdjustLogLevel2dxAssert`   | 禁用错误及更低级别日志                 |
| `AdjustLogLevel2dxSuppress` | 禁止所有日志                      |

您可以在 `AdjustConfig2dx` 实例上使用下列参数调用 `setLogLevel` 方法，以设置日志级别：

{% deflist %}
`logLevel` (`ADJLogLevel2dx`)

: 要使用的日志级别。
{% /deflist %}

```cpp
std::string appToken = "{% $variables.config.token %}";
std::string environment = AdjustEnvironmentSandbox2dx;

AdjustConfig2dx adjustConfig = AdjustConfig2dx(appToken, environment);
adjustConfig.setLogLevel(AdjustLogLevel2dxVerbose);
Adjust2dx::initSdk(adjustConfig);
```

### 设置外部设备标识符{% #set-external-device-id %}


{% callout type="seealso" %}
要了解更多信息，请参考 Adjust 帮助中心的[外部设备标识符文档](https://help.adjust.com/zh/article/external-device-identifiers)。
{% /callout %}

外部设备标识符是您为设备或用户自定义的一个值。您可以通过这个值在不同的会话和平台中识别用户。您也可以通过该值基于用户对安装进行去重，这样同一位用户就不会被记录为多次新安装了。请联系您的 Adjust 代表来开始使用外部设备 ID。

您可以使用外部设备 ID 作为设备的自定义标识符。这可以确保您的数据与其他系统中的数据保持一致性。您可以使用下列参数调用 `setExternalDeviceId` 方法，以设置该属性：

{% deflist %}
`externalDeviceId` (`std::string`)

: 您的外部设备标识符。需要 **区分大小写** 。如果您导入了外部设备 ID，则需要确保发送的值与已导入的值相匹配。
{% /deflist %}

```cpp
AdjustConfig2dx adjustConfig = AdjustConfig2dx(appToken, environment);
adjustConfig.setExternalDeviceId("{% $variables.config.externalDeviceId %}");
Adjust2dx::initSdk(adjustConfig);
```

如果您想在商业分析中使用外部设备 ID，则可以将其作为[会话回传参数](/zh/sdk/cocos2dx/features/session-parameters)发送。

您可以将已有外部设备 ID 导入到 Adjust。这能保证 Adjust 服务器将未来的数据与已有设备记录相匹配。请联系您的 Adjust 代表，了解更多信息。

### 设置默认链接识别码{% #set-default-link-token %}

如果您的应用已预安装在设备上，那么则可以配置一个默认链接识别码。当用户首次打开预安装应用时，安装就会被归因给默认链接识别码。要设置默认链接识别码，请使用下列参数调用`AdjustConfig2dx`实例的 `setDefaultTracker` 方法：

{% deflist %}
`defaultTracker` (`std::string`)

: 用于记录预安装应用安装的 [Adjust 链接识别码](https://help.adjust.com/zh/article/links#adjust-link-token)。
{% /deflist %}

```cpp
AdjustConfig2dx adjustConfig = AdjustConfig2dx(appToken, environment);
adjustConfig.setDefaultTracker("{% $variables.config.defaultLink %}");
Adjust2dx::initSdk(config);
```

### 在归因中接收广告支出数据{% #receive-ad-spend-data %}

默认情况下，Adjust 不会在用户归因信息中发送广告支出数据。您可以启用成本数据发送，使 SDK 发送成本数据。要启用广告支出数据发送，请调用`AdjustConfig2dx`实例的`enableCostDataInAttribution()`方法。

您可以在用户的[归因信息](/zh/sdk/cocos2dx/features/attribution)中访问成本数据。

```cpp
AdjustConfig2dx adjustConfig = AdjustConfig2dx(appToken, environment);
adjustConfig.enableCostDataInAttribution();
Adjust2dx::initSdk(config);
```

### 启用后台记录{% #enable-background-recording %}

默认情况下，应用在后台运行时，Adjust SDK 会暂停发送请求。您可以通过启用后台记录功能来使 SDK 在应用位于后台时发送请求。要启用后台记录，请调用`AdjustConfig2dx`实例的`enableSendingInBackground`方法。

```cpp
AdjustConfig2dx adjustConfig = AdjustConfig2dx(appToken, environment);
adjustConfig.enableSendingInBackground();
Adjust2dx::initSdk(adjustConfig);
```

## 动态配置{% #dynamic-configuration %}

为响应事件或用户进行的操作， **动态** 配置选项可能在 SDK 的生命周期中发生变化。

### 激活离线模式{% #activate-offline-mode %}


{% callout type="important" %}
离线模式设置在会话之间不被保存。离线模式在每次新会话开始时会被关闭。
{% /callout %}

Adjust SDK 会实时向 Adjust 后端发送事件和会话数据。您可以通过将 SDK 设为离线状态来暂停信息的发送。在离线状态中，SDK 会在设备本地文件中存储所有数据。离线模式关闭后，SDK 会将此信息发送至 Adjust 服务器。

您可以随时调用`Adjust2dx::switchToOfflineMode`方法来开启和关闭离线模式。

```cpp
Adjust2dx::switchToOfflineMode();
```

### 禁用离线模式{% #deactivate-offline-mode %}

您可以通过调用`Adjust2dx::switchBackToOnlineMode`方法来重新启用 SDK。这会提示 SDK 恢复发送信息。

```cpp
Adjust2dx::switchBackToOnlineMode();
```

### 设置推送标签 {% #set-push-tokens %}

推送标签 (Push token) 用于[受众](https://help.adjust.com/zh/article/audiences)和客户回传。在[卸载和重装监测](https://help.adjust.com/zh/article/uninstalls-reinstalls)中，推送标签也是必要的。

您可以随时使用以下参数调用`Adjust2dx::setPushToken`方法来更新推送标签：

{% deflist %}
`pushtoken` (`std::string`)

: 您的推送标签。
{% /deflist %}

```cpp
Adjust2dx::setPushToken("push-token");
```

### 禁用 SDK {% #disable-the-sdk %}

应用打开时 Adjust SDK 会默认运行。您可以通过调用`Adjust2dx::disable`方法禁用 Adjust SDK，暂停向 Adjust 发送信息。禁用 Adjust SDK 后，Adjust 不会收到任何数据，SDK 也不会记录任何信息。也就是说，SDK 禁用时调用的任何 Adjust 方法都不会记录任何内容。

```cpp
Adjust2dx::disable();
```

### 启用 SDK{% #enable-the-sdk %}

如果您已经禁用了 SDK 并希望重新启用，请调用`Adjust2dx::enable`方法。启用后，SDK 会向 Adjust 服务器发送信息。

```cpp
Adjust2dx::enable();
```

#### 查看启用状态{% #check-enabled-status %}

您可以随时调用`Adjust2dx::isEnabled`方法并发送回传函数来查看 Adjust SDK 是否启用。状态以异步方式返回并以`bool`值传递至您的回传函数。

```cpp
Adjust2dx::isEnabled([](bool isEnabled) {
   // process isEnabled
});
```
