---
title: 深度链接
description: 按照本节中的说明操作，设置深度链接。
category-title: 深度链接
slug: zh/sdk/cocos2dx/features/deep-links
versions:
  - label: v5
    value: v5
    default: true
  - label: v4
    value: v4
redirects:
  v4: /zh/sdk/cocos2dx/v4/features/deep-links
---

您可以创建深度链接来将用户转到应用中的特定页面。针对用户是否已在设备上安装您的应用，Adjust SDK 会使用不同的逻辑：

- 直接深度链接：用于用户已经安装应用的情况。用户会被转向链接中指定的页面。
- 如果用户尚未安装应用，那么就会发生延迟深度链接。链接首先会将用户转向应用商店页面来安装应用。用户安装后，就会被带到链接中指定的页面。

用户通过链接打开应用后，SDK 就可以读取深度链接数据了。

## 直接深度链接{% #direct-deep-linking %}

直接深度链接必须在平台层级设置。您无法在 Cocos2d-x C++ 代码中设置直接深度链接。

请按照下方链接中的说明，在您的目标平台上设置深度链接：

- [iOS](/zh/sdk/ios/features/deep-links/direct)
- [安卓](/zh/sdk/android/features/deep-links)

## 延迟深度链接回传 {% #deferred-deep-link-callbacks %}

您可以配置 Adjust SDK，使其在接收到延迟深度链接时调用一个回传函数。回传函数会以`string`参数的形式接收深度链接。

```cpp
std::string appToken = "{% $variables.config.token %}";
std::string environment = AdjustEnvironmentSandbox2dx;

AdjustConfig2dx adjustConfig = AdjustConfig2dx(appToken, environment);
adjustConfig.setLogLevel(AdjustLogLevel2dxVerbose);
adjustConfig.setDeferredDeeplinkCallback([](std::string adjustDeeplink) {
    // process adjustDeeplink
});
Adjust2dx::initSdk(adjustConfig);
```

## 通过深度链接进行再归因{% #reattribution-via-deep-links %}

Adjust 支持您使用深度链接开展再交互推广活动。要了解更多信息，请查看如何[在 Campaign Lab 中设置深度链接](https://help.adjust.com/zh/article/deep-links)。

要对用户进行再归因，您需要使用深度链接 URL 实例化一个`AdjustDeeplink2dx`对象并将其传递至`Adjust2dx::processDeeplink`方法。这样，Adjust SDK 就会在深度链接中寻找新的归因信息。如果 SDK 找到新信息，就会将其转发至 Adjust 服务器进行再归因。

```cpp
AdjustDeeplink2dx adjustDeeplink = AdjustDeeplink2dx("url");
Adjust2dx::processDeeplink(adjustDeeplink);
```

## 启用 LinkMe {% #enable-linkme %}

通过 Adjust SDK，您可以从设备剪贴板复制深度链接信息。配合[Adjust LinkMe 解决方案](https://help.adjust.com/zh/article/linkme)使用时，该功能可在 iOS 15 及更高版本操作系统中设置延迟深度链接。

{% callout type="important" %}
用户第一次打开应用时，Adjust SDK 会检查剪贴板。设备会显示对话框，询问用户是否允许应用读取剪贴板。
{% /callout %}

当用户点击 LinkMe URL 时，可以选择将链接信息复制到剪贴板。您可以使用 Adjust SDK 读取系统剪贴板，获取深度链接信息。如果含有深度链接信息，SDK 就会将用户转到应用中的正确页面。

要在应用中启用剪贴板查看，请在`AdjustConfig2dx`实例上调用`enableLinkMe`方法。

```cpp
std::string appToken = "{% $variables.config.token %}";
std::string environment = AdjustEnvironmentSandbox2dx;

AdjustConfig2dx adjustConfig = AdjustConfig2dx(appToken, environment);
adjustConfig.setLogLevel(AdjustLogLevel2dxVerbose);
adjustConfig.enableLinkMe();
Adjust2dx::initSdk(adjustConfig)
```

## 获取最近处理的链接{% #get-the-last-processed-link %}

您可以通过调用`Adjust2dx::getLastDeeplink`方法来返回由`Adjust2sx::processDeeplink`或`Adjust2dx::processAndResolveDeepLink`方法解析的最近一个深度链接 URL。该方法以深度链接对象的形式返回最近处理的深度链接。

```cpp
Adjust2dx::getLastDeeplink([](std::string lastDeeplink) {
    std::cout << "\nLast deeplink = " << lastDeeplink;
});
```
